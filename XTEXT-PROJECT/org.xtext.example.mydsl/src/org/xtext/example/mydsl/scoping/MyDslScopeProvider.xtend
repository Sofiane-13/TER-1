/*
 * generated by Xtext 2.12.0
 */
package org.xtext.example.mydsl.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.xtext.example.mydsl.myDsl.ServiceName
import org.xtext.example.mydsl.myDsl.MyDslPackage
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.xtext.example.mydsl.myDsl.Component
import org.xtext.example.mydsl.myDsl.RequiredService
import org.xtext.example.mydsl.myDsl.Bindings

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MyDslScopeProvider extends AbstractMyDslScopeProvider {
	
override getScope(EObject context, EReference reference) {
    // We want to define the Scope for the Element's superElement cross-reference
    if (context instanceof RequiredService
            && reference == MyDslPackage.Literals.REQUIRED_SERVICE__NAME_SERV) {
        // Collect a list of candidates by going through the model
        // EcoreUtil2 provides useful functionality to do that
        // For example searching for all elements within the root Object's tree
        val rootElement = EcoreUtil2.getRootContainer(context)
        val candidates = EcoreUtil2.getAllContentsOfType(rootElement,ServiceName )
        // Create IEObjectDescriptions and puts them into an IScope instance
        return Scopes.scopeFor(candidates)
    }
    if (context instanceof Bindings
            && reference == MyDslPackage.Literals.BINDINGS__NAME_SERV2) {
        // Collect a list of candidates by going through the model
        // EcoreUtil2 provides useful functionality to do that
        // For example searching for all elements within the root Object's tree
        val rootElement = EcoreUtil2.getRootContainer(context)
        val candidates = EcoreUtil2.getAllContentsOfType(rootElement,ServiceName )
        // Create IEObjectDescriptions and puts them into an IScope instance
        return Scopes.scopeFor(candidates)
    }
    return super.getScope(context, reference);
}


}
