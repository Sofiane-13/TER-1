/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
grammar InternalMappingAssistance;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package com.aelos.xtext.mappingassistance.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.aelos.xtext.mappingassistance.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import com.aelos.xtext.mappingassistance.services.MappingAssistanceGrammarAccess;

}
@parser::members {
	private MappingAssistanceGrammarAccess grammarAccess;

	public void setGrammarAccess(MappingAssistanceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getFunctionAssignment()); }
		(rule__Model__FunctionAssignment)*
		{ after(grammarAccess.getModelAccess().getFunctionAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAbstractModel
entryRuleAbstractModel
:
{ before(grammarAccess.getAbstractModelRule()); }
	 ruleAbstractModel
{ after(grammarAccess.getAbstractModelRule()); } 
	 EOF 
;

// Rule AbstractModel
ruleAbstractModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAbstractModelAccess().getGroup()); }
		(rule__AbstractModel__Group__0)
		{ after(grammarAccess.getAbstractModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedNameWithWildcard
entryRuleQualifiedNameWithWildcard
:
{ before(grammarAccess.getQualifiedNameWithWildcardRule()); }
	 ruleQualifiedNameWithWildcard
{ after(grammarAccess.getQualifiedNameWithWildcardRule()); } 
	 EOF 
;

// Rule QualifiedNameWithWildcard
ruleQualifiedNameWithWildcard 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
		(rule__QualifiedNameWithWildcard__Group__0)
		{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleQualifiedName
entryRuleQualifiedName
:
{ before(grammarAccess.getQualifiedNameRule()); }
	 ruleQualifiedName
{ after(grammarAccess.getQualifiedNameRule()); } 
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getQualifiedNameAccess().getGroup()); }
		(rule__QualifiedName__Group__0)
		{ after(grammarAccess.getQualifiedNameAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestedcomposant
entryRuleTestedcomposant
:
{ before(grammarAccess.getTestedcomposantRule()); }
	 ruleTestedcomposant
{ after(grammarAccess.getTestedcomposantRule()); } 
	 EOF 
;

// Rule Testedcomposant
ruleTestedcomposant 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestedcomposantAccess().getNameCompAssignment()); }
		(rule__Testedcomposant__NameCompAssignment)
		{ after(grammarAccess.getTestedcomposantAccess().getNameCompAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTestedservice
entryRuleTestedservice
:
{ before(grammarAccess.getTestedserviceRule()); }
	 ruleTestedservice
{ after(grammarAccess.getTestedserviceRule()); } 
	 EOF 
;

// Rule Testedservice
ruleTestedservice 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTestedserviceAccess().getGroup()); }
		(rule__Testedservice__Group__0)
		{ after(grammarAccess.getTestedserviceAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMocks
entryRuleMocks
:
{ before(grammarAccess.getMocksRule()); }
	 ruleMocks
{ after(grammarAccess.getMocksRule()); } 
	 EOF 
;

// Rule Mocks
ruleMocks 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMocksAccess().getGroup()); }
		(rule__Mocks__Group__0)
		{ after(grammarAccess.getMocksAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleObserveurs
entryRuleObserveurs
:
{ before(grammarAccess.getObserveursRule()); }
	 ruleObserveurs
{ after(grammarAccess.getObserveursRule()); } 
	 EOF 
;

// Rule Observeurs
ruleObserveurs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getObserveursAccess().getGroup()); }
		(rule__Observeurs__Group__0)
		{ after(grammarAccess.getObserveursAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Type
ruleType
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getAlternatives()); }
		(rule__Type__Alternatives)
		{ after(grammarAccess.getTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Type__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTypeAccess().getINTEnumLiteralDeclaration_0()); }
		('INT')
		{ after(grammarAccess.getTypeAccess().getINTEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getSTRINGEnumLiteralDeclaration_1()); }
		('STRING')
		{ after(grammarAccess.getTypeAccess().getSTRINGEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_2()); }
		('Boolean')
		{ after(grammarAccess.getTypeAccess().getBooleanEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getTypeAccess().getDoubleEnumLiteralDeclaration_3()); }
		('Double')
		{ after(grammarAccess.getTypeAccess().getDoubleEnumLiteralDeclaration_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractModel__Group__0__Impl
	rule__AbstractModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractModelAccess().getImportParserRuleCall_0()); }
	ruleImport
	{ after(grammarAccess.getAbstractModelAccess().getImportParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractModel__Group__1__Impl
	rule__AbstractModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractModelAccess().getObsAssignment_1()); }
	(rule__AbstractModel__ObsAssignment_1)*
	{ after(grammarAccess.getAbstractModelAccess().getObsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractModel__Group__2__Impl
	rule__AbstractModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractModelAccess().getMockAssignment_2()); }
	(rule__AbstractModel__MockAssignment_2)*
	{ after(grammarAccess.getAbstractModelAccess().getMockAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractModel__Group__3__Impl
	rule__AbstractModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getAbstractModelAccess().getTestedservAssignment_3()); }
		(rule__AbstractModel__TestedservAssignment_3)
		{ after(grammarAccess.getAbstractModelAccess().getTestedservAssignment_3()); }
	)
	(
		{ before(grammarAccess.getAbstractModelAccess().getTestedservAssignment_3()); }
		(rule__AbstractModel__TestedservAssignment_3)*
		{ after(grammarAccess.getAbstractModelAccess().getTestedservAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AbstractModel__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAbstractModelAccess().getTestedcompAssignment_4()); }
	(rule__AbstractModel__TestedcompAssignment_4)
	{ after(grammarAccess.getAbstractModelAccess().getTestedcompAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
	(rule__Import__ImportedNamespaceAssignment_1)
	{ after(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedNameWithWildcard__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildcard__Group__0__Impl
	rule__QualifiedNameWithWildcard__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
	ruleQualifiedName
	{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getQualifiedNameParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedNameWithWildcard__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedNameWithWildcard__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
	('.*')?
	{ after(grammarAccess.getQualifiedNameWithWildcardAccess().getFullStopAsteriskKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__0__Impl
	rule__QualifiedName__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
	(rule__QualifiedName__Group_1__0)*
	{ after(grammarAccess.getQualifiedNameAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__QualifiedName__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__0__Impl
	rule__QualifiedName__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
	'.'
	{ after(grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__QualifiedName__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__QualifiedName__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
	RULE_ID
	{ after(grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Testedservice__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Testedservice__Group__0__Impl
	rule__Testedservice__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Testedservice__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestedserviceAccess().getNameCompAssignment_0()); }
	(rule__Testedservice__NameCompAssignment_0)
	{ after(grammarAccess.getTestedserviceAccess().getNameCompAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testedservice__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Testedservice__Group__1__Impl
	rule__Testedservice__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Testedservice__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestedserviceAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getTestedserviceAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testedservice__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Testedservice__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Testedservice__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTestedserviceAccess().getNameServ1Assignment_2()); }
	(rule__Testedservice__NameServ1Assignment_2)
	{ after(grammarAccess.getTestedserviceAccess().getNameServ1Assignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Mocks__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mocks__Group__0__Impl
	rule__Mocks__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMocksAccess().getAddMockKeyword_0()); }
	'addMock('
	{ after(grammarAccess.getMocksAccess().getAddMockKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mocks__Group__1__Impl
	rule__Mocks__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMocksAccess().getMocknameAssignment_1()); }
	(rule__Mocks__MocknameAssignment_1)
	{ after(grammarAccess.getMocksAccess().getMocknameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mocks__Group__2__Impl
	rule__Mocks__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMocksAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getMocksAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mocks__Group__3__Impl
	rule__Mocks__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMocksAccess().getNameCompAssignment_3()); }
	(rule__Mocks__NameCompAssignment_3)
	{ after(grammarAccess.getMocksAccess().getNameCompAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mocks__Group__4__Impl
	rule__Mocks__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMocksAccess().getFullStopKeyword_4()); }
	'.'
	{ after(grammarAccess.getMocksAccess().getFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mocks__Group__5__Impl
	rule__Mocks__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMocksAccess().getNameServ1Assignment_5()); }
	(rule__Mocks__NameServ1Assignment_5)
	{ after(grammarAccess.getMocksAccess().getNameServ1Assignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Mocks__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMocksAccess().getRightParenthesisKeyword_6()); }
	')'
	{ after(grammarAccess.getMocksAccess().getRightParenthesisKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Observeurs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Observeurs__Group__0__Impl
	rule__Observeurs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObserveursAccess().getAddObserveurKeyword_0()); }
	'addObserveur('
	{ after(grammarAccess.getObserveursAccess().getAddObserveurKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Observeurs__Group__1__Impl
	rule__Observeurs__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObserveursAccess().getObsnameAssignment_1()); }
	(rule__Observeurs__ObsnameAssignment_1)
	{ after(grammarAccess.getObserveursAccess().getObsnameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Observeurs__Group__2__Impl
	rule__Observeurs__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObserveursAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getObserveursAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Observeurs__Group__3__Impl
	rule__Observeurs__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObserveursAccess().getNameCompAssignment_3()); }
	(rule__Observeurs__NameCompAssignment_3)
	{ after(grammarAccess.getObserveursAccess().getNameCompAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Observeurs__Group__4__Impl
	rule__Observeurs__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObserveursAccess().getFullStopKeyword_4()); }
	'.'
	{ after(grammarAccess.getObserveursAccess().getFullStopKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Observeurs__Group__5__Impl
	rule__Observeurs__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObserveursAccess().getNameServ1Assignment_5()); }
	(rule__Observeurs__NameServ1Assignment_5)
	{ after(grammarAccess.getObserveursAccess().getNameServ1Assignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Observeurs__Group__6__Impl
	rule__Observeurs__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObserveursAccess().getCommaKeyword_6()); }
	','
	{ after(grammarAccess.getObserveursAccess().getCommaKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Observeurs__Group__7__Impl
	rule__Observeurs__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObserveursAccess().getNameCompAssignment_7()); }
	(rule__Observeurs__NameCompAssignment_7)
	{ after(grammarAccess.getObserveursAccess().getNameCompAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Observeurs__Group__8__Impl
	rule__Observeurs__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObserveursAccess().getFullStopKeyword_8()); }
	'.'
	{ after(grammarAccess.getObserveursAccess().getFullStopKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Observeurs__Group__9__Impl
	rule__Observeurs__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObserveursAccess().getNameServ2Assignment_9()); }
	(rule__Observeurs__NameServ2Assignment_9)
	{ after(grammarAccess.getObserveursAccess().getNameServ2Assignment_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Observeurs__Group__10__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getObserveursAccess().getRightParenthesisKeyword_10()); }
	')'
	{ after(grammarAccess.getObserveursAccess().getRightParenthesisKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__FunctionAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getFunctionAbstractModelParserRuleCall_0()); }
		ruleAbstractModel
		{ after(grammarAccess.getModelAccess().getFunctionAbstractModelParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__ObsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractModelAccess().getObsObserveursParserRuleCall_1_0()); }
		ruleObserveurs
		{ after(grammarAccess.getAbstractModelAccess().getObsObserveursParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__MockAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractModelAccess().getMockMocksParserRuleCall_2_0()); }
		ruleMocks
		{ after(grammarAccess.getAbstractModelAccess().getMockMocksParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__TestedservAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractModelAccess().getTestedservTestedserviceParserRuleCall_3_0()); }
		ruleTestedservice
		{ after(grammarAccess.getAbstractModelAccess().getTestedservTestedserviceParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AbstractModel__TestedcompAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAbstractModelAccess().getTestedcompTestedcomposantParserRuleCall_4_0()); }
		ruleTestedcomposant
		{ after(grammarAccess.getAbstractModelAccess().getTestedcompTestedcomposantParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ImportedNamespaceAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
		ruleQualifiedNameWithWildcard
		{ after(grammarAccess.getImportAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testedcomposant__NameCompAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestedcomposantAccess().getNameCompInstanceCompCrossReference_0()); }
		(
			{ before(grammarAccess.getTestedcomposantAccess().getNameCompInstanceCompIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTestedcomposantAccess().getNameCompInstanceCompIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getTestedcomposantAccess().getNameCompInstanceCompCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testedservice__NameCompAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestedserviceAccess().getNameCompInstanceCompCrossReference_0_0()); }
		(
			{ before(grammarAccess.getTestedserviceAccess().getNameCompInstanceCompIDTerminalRuleCall_0_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTestedserviceAccess().getNameCompInstanceCompIDTerminalRuleCall_0_0_1()); }
		)
		{ after(grammarAccess.getTestedserviceAccess().getNameCompInstanceCompCrossReference_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Testedservice__NameServ1Assignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTestedserviceAccess().getNameServ1ServiceNameCrossReference_2_0()); }
		(
			{ before(grammarAccess.getTestedserviceAccess().getNameServ1ServiceNameIDTerminalRuleCall_2_0_1()); }
			RULE_ID
			{ after(grammarAccess.getTestedserviceAccess().getNameServ1ServiceNameIDTerminalRuleCall_2_0_1()); }
		)
		{ after(grammarAccess.getTestedserviceAccess().getNameServ1ServiceNameCrossReference_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__MocknameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMocksAccess().getMocknameMockNameCrossReference_1_0()); }
		(
			{ before(grammarAccess.getMocksAccess().getMocknameMockNameIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMocksAccess().getMocknameMockNameIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getMocksAccess().getMocknameMockNameCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__NameCompAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMocksAccess().getNameCompInstanceCompCrossReference_3_0()); }
		(
			{ before(grammarAccess.getMocksAccess().getNameCompInstanceCompIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMocksAccess().getNameCompInstanceCompIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getMocksAccess().getNameCompInstanceCompCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Mocks__NameServ1Assignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMocksAccess().getNameServ1ServiceNameCrossReference_5_0()); }
		(
			{ before(grammarAccess.getMocksAccess().getNameServ1ServiceNameIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getMocksAccess().getNameServ1ServiceNameIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getMocksAccess().getNameServ1ServiceNameCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__ObsnameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObserveursAccess().getObsnameObserveurNameCrossReference_1_0()); }
		(
			{ before(grammarAccess.getObserveursAccess().getObsnameObserveurNameIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getObserveursAccess().getObsnameObserveurNameIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getObserveursAccess().getObsnameObserveurNameCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__NameCompAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObserveursAccess().getNameCompInstanceCompCrossReference_3_0()); }
		(
			{ before(grammarAccess.getObserveursAccess().getNameCompInstanceCompIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getObserveursAccess().getNameCompInstanceCompIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getObserveursAccess().getNameCompInstanceCompCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__NameServ1Assignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObserveursAccess().getNameServ1ServiceNameCrossReference_5_0()); }
		(
			{ before(grammarAccess.getObserveursAccess().getNameServ1ServiceNameIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getObserveursAccess().getNameServ1ServiceNameIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getObserveursAccess().getNameServ1ServiceNameCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__NameCompAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObserveursAccess().getNameCompInstanceCompCrossReference_7_0()); }
		(
			{ before(grammarAccess.getObserveursAccess().getNameCompInstanceCompIDTerminalRuleCall_7_0_1()); }
			RULE_ID
			{ after(grammarAccess.getObserveursAccess().getNameCompInstanceCompIDTerminalRuleCall_7_0_1()); }
		)
		{ after(grammarAccess.getObserveursAccess().getNameCompInstanceCompCrossReference_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Observeurs__NameServ2Assignment_9
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getObserveursAccess().getNameServ2ServiceNameCrossReference_9_0()); }
		(
			{ before(grammarAccess.getObserveursAccess().getNameServ2ServiceNameIDTerminalRuleCall_9_0_1()); }
			RULE_ID
			{ after(grammarAccess.getObserveursAccess().getNameServ2ServiceNameIDTerminalRuleCall_9_0_1()); }
		)
		{ after(grammarAccess.getObserveursAccess().getNameServ2ServiceNameCrossReference_9_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
