/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.architecture.architecture.impl;

import com.aelos.xtext.architecture.architecture.AbstractModel;
import com.aelos.xtext.architecture.architecture.Architecture;
import com.aelos.xtext.architecture.architecture.ArchitecturePackage;
import com.aelos.xtext.architecture.architecture.Component;
import com.aelos.xtext.architecture.architecture.Import;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Abstract Model</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.aelos.xtext.architecture.architecture.impl.AbstractModelImpl#getImp <em>Imp</em>}</li>
 *   <li>{@link com.aelos.xtext.architecture.architecture.impl.AbstractModelImpl#getComp <em>Comp</em>}</li>
 *   <li>{@link com.aelos.xtext.architecture.architecture.impl.AbstractModelImpl#getArch <em>Arch</em>}</li>
 * </ul>
 *
 * @generated
 */
public class AbstractModelImpl extends MinimalEObjectImpl.Container implements AbstractModel
{
  /**
   * The cached value of the '{@link #getImp() <em>Imp</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getImp()
   * @generated
   * @ordered
   */
  protected EList<Import> imp;

  /**
   * The cached value of the '{@link #getComp() <em>Comp</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComp()
   * @generated
   * @ordered
   */
  protected EList<Component> comp;

  /**
   * The cached value of the '{@link #getArch() <em>Arch</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArch()
   * @generated
   * @ordered
   */
  protected EList<Architecture> arch;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected AbstractModelImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return ArchitecturePackage.Literals.ABSTRACT_MODEL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Import> getImp()
  {
    if (imp == null)
    {
      imp = new EObjectContainmentEList<Import>(Import.class, this, ArchitecturePackage.ABSTRACT_MODEL__IMP);
    }
    return imp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Component> getComp()
  {
    if (comp == null)
    {
      comp = new EObjectContainmentEList<Component>(Component.class, this, ArchitecturePackage.ABSTRACT_MODEL__COMP);
    }
    return comp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Architecture> getArch()
  {
    if (arch == null)
    {
      arch = new EObjectContainmentEList<Architecture>(Architecture.class, this, ArchitecturePackage.ABSTRACT_MODEL__ARCH);
    }
    return arch;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case ArchitecturePackage.ABSTRACT_MODEL__IMP:
        return ((InternalEList<?>)getImp()).basicRemove(otherEnd, msgs);
      case ArchitecturePackage.ABSTRACT_MODEL__COMP:
        return ((InternalEList<?>)getComp()).basicRemove(otherEnd, msgs);
      case ArchitecturePackage.ABSTRACT_MODEL__ARCH:
        return ((InternalEList<?>)getArch()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case ArchitecturePackage.ABSTRACT_MODEL__IMP:
        return getImp();
      case ArchitecturePackage.ABSTRACT_MODEL__COMP:
        return getComp();
      case ArchitecturePackage.ABSTRACT_MODEL__ARCH:
        return getArch();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case ArchitecturePackage.ABSTRACT_MODEL__IMP:
        getImp().clear();
        getImp().addAll((Collection<? extends Import>)newValue);
        return;
      case ArchitecturePackage.ABSTRACT_MODEL__COMP:
        getComp().clear();
        getComp().addAll((Collection<? extends Component>)newValue);
        return;
      case ArchitecturePackage.ABSTRACT_MODEL__ARCH:
        getArch().clear();
        getArch().addAll((Collection<? extends Architecture>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case ArchitecturePackage.ABSTRACT_MODEL__IMP:
        getImp().clear();
        return;
      case ArchitecturePackage.ABSTRACT_MODEL__COMP:
        getComp().clear();
        return;
      case ArchitecturePackage.ABSTRACT_MODEL__ARCH:
        getArch().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case ArchitecturePackage.ABSTRACT_MODEL__IMP:
        return imp != null && !imp.isEmpty();
      case ArchitecturePackage.ABSTRACT_MODEL__COMP:
        return comp != null && !comp.isEmpty();
      case ArchitecturePackage.ABSTRACT_MODEL__ARCH:
        return arch != null && !arch.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //AbstractModelImpl
