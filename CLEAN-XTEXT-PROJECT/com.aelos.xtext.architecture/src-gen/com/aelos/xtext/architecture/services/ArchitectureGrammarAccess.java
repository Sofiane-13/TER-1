/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.architecture.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ArchitectureGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aelos.xtext.architecture.Architecture.Model");
		private final Assignment cFunctionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cFunctionAbstractModelParserRuleCall_0 = (RuleCall)cFunctionAssignment.eContents().get(0);
		
		//Model:
		//	function+=AbstractModel*;
		@Override public ParserRule getRule() { return rule; }
		
		//function+=AbstractModel*
		public Assignment getFunctionAssignment() { return cFunctionAssignment; }
		
		//AbstractModel
		public RuleCall getFunctionAbstractModelParserRuleCall_0() { return cFunctionAbstractModelParserRuleCall_0; }
	}
	public class AbstractModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aelos.xtext.architecture.Architecture.AbstractModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cImportParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Assignment cCompAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompComponentParserRuleCall_1_0 = (RuleCall)cCompAssignment_1.eContents().get(0);
		
		//AbstractModel:
		//	Import? comp+=Component+;
		@Override public ParserRule getRule() { return rule; }
		
		//Import? comp+=Component+
		public Group getGroup() { return cGroup; }
		
		//Import?
		public RuleCall getImportParserRuleCall_0() { return cImportParserRuleCall_0; }
		
		//comp+=Component+
		public Assignment getCompAssignment_1() { return cCompAssignment_1; }
		
		//Component
		public RuleCall getCompComponentParserRuleCall_1_0() { return cCompComponentParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aelos.xtext.architecture.Architecture.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' importedNamespace=QualifiedNameWithWildcard;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' importedNamespace=QualifiedNameWithWildcard
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//importedNamespace=QualifiedNameWithWildcard
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }
		
		//QualifiedNameWithWildcard
		public RuleCall getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0() { return cImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0; }
	}
	public class QualifiedNameWithWildcardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aelos.xtext.architecture.Architecture.QualifiedNameWithWildcard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//QualifiedNameWithWildcard:
		//	QualifiedName '.*'?;
		@Override public ParserRule getRule() { return rule; }
		
		//QualifiedName '.*'?
		public Group getGroup() { return cGroup; }
		
		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }
		
		//'.*'?
		public Keyword getFullStopAsteriskKeyword_1() { return cFullStopAsteriskKeyword_1; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aelos.xtext.architecture.Architecture.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class ComponentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aelos.xtext.architecture.Architecture.Component");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComponentKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cInstAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cInstInstanceCompParserRuleCall_1_0 = (RuleCall)cInstAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cProvidedServicesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cConfKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cArgAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cArgVariableParserRuleCall_6_0_0 = (RuleCall)cArgAssignment_6_0.eContents().get(0);
		private final Keyword cCommaKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cArg1Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cArg1VariableParserRuleCall_7_0 = (RuleCall)cArg1Assignment_7.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cMethodeAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cMethodeServiceNameParserRuleCall_9_0_0 = (RuleCall)cMethodeAssignment_9_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_9_1 = (Keyword)cGroup_9.eContents().get(1);
		private final Group cGroup_9_2 = (Group)cGroup_9.eContents().get(2);
		private final Group cGroup_9_2_0 = (Group)cGroup_9_2.eContents().get(0);
		private final Assignment cArgAssignment_9_2_0_0 = (Assignment)cGroup_9_2_0.eContents().get(0);
		private final RuleCall cArgVariableParserRuleCall_9_2_0_0_0 = (RuleCall)cArgAssignment_9_2_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_9_2_0_1 = (Keyword)cGroup_9_2_0.eContents().get(1);
		private final Assignment cArgAssignment_9_2_1 = (Assignment)cGroup_9_2.eContents().get(1);
		private final RuleCall cArgVariableParserRuleCall_9_2_1_0 = (RuleCall)cArgAssignment_9_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_9_3 = (Keyword)cGroup_9.eContents().get(3);
		private final Group cGroup_9_4 = (Group)cGroup_9.eContents().get(4);
		private final Keyword cColonKeyword_9_4_0 = (Keyword)cGroup_9_4.eContents().get(0);
		private final Assignment cArgAssignment_9_4_1 = (Assignment)cGroup_9_4.eContents().get(1);
		private final RuleCall cArgVariableParserRuleCall_9_4_1_0 = (RuleCall)cArgAssignment_9_4_1.eContents().get(0);
		private final Keyword cRequiredServicesKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cReqAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cReqRequiredServiceParserRuleCall_11_0 = (RuleCall)cReqAssignment_11.eContents().get(0);
		private final Assignment cBindAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final RuleCall cBindBindingsParserRuleCall_12_0 = (RuleCall)cBindAssignment_12.eContents().get(0);
		
		//Component:
		//	=> "Component:" inst+=InstanceComp ":" => name=ID
		//	"ProvidedServices:"
		//	"conf(" (arg+=Variable ",")* arg1+=Variable ")" (methode+=ServiceName "(" ((arg+=Variable ",")* arg+=Variable)* ")"
		//	(":" arg+=Variable)?)*
		//	"RequiredServices:"?
		//	req+=RequiredService*
		//	bind+=Bindings*;
		@Override public ParserRule getRule() { return rule; }
		
		//=> "Component:" inst+=InstanceComp ":" => name=ID "ProvidedServices:" "conf(" (arg+=Variable ",")* arg1+=Variable ")"
		//(methode+=ServiceName "(" ((arg+=Variable ",")* arg+=Variable)* ")" (":" arg+=Variable)?)* "RequiredServices:"?
		//req+=RequiredService* bind+=Bindings*
		public Group getGroup() { return cGroup; }
		
		//=> "Component:"
		public Keyword getComponentKeyword_0() { return cComponentKeyword_0; }
		
		//inst+=InstanceComp
		public Assignment getInstAssignment_1() { return cInstAssignment_1; }
		
		//InstanceComp
		public RuleCall getInstInstanceCompParserRuleCall_1_0() { return cInstInstanceCompParserRuleCall_1_0; }
		
		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//=> name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//"ProvidedServices:"
		public Keyword getProvidedServicesKeyword_4() { return cProvidedServicesKeyword_4; }
		
		//"conf("
		public Keyword getConfKeyword_5() { return cConfKeyword_5; }
		
		//(arg+=Variable ",")*
		public Group getGroup_6() { return cGroup_6; }
		
		//arg+=Variable
		public Assignment getArgAssignment_6_0() { return cArgAssignment_6_0; }
		
		//Variable
		public RuleCall getArgVariableParserRuleCall_6_0_0() { return cArgVariableParserRuleCall_6_0_0; }
		
		//","
		public Keyword getCommaKeyword_6_1() { return cCommaKeyword_6_1; }
		
		//arg1+=Variable
		public Assignment getArg1Assignment_7() { return cArg1Assignment_7; }
		
		//Variable
		public RuleCall getArg1VariableParserRuleCall_7_0() { return cArg1VariableParserRuleCall_7_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
		
		//(methode+=ServiceName "(" ((arg+=Variable ",")* arg+=Variable)* ")" (":" arg+=Variable)?)*
		public Group getGroup_9() { return cGroup_9; }
		
		//methode+=ServiceName
		public Assignment getMethodeAssignment_9_0() { return cMethodeAssignment_9_0; }
		
		//ServiceName
		public RuleCall getMethodeServiceNameParserRuleCall_9_0_0() { return cMethodeServiceNameParserRuleCall_9_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_9_1() { return cLeftParenthesisKeyword_9_1; }
		
		//((arg+=Variable ",")* arg+=Variable)*
		public Group getGroup_9_2() { return cGroup_9_2; }
		
		//(arg+=Variable ",")*
		public Group getGroup_9_2_0() { return cGroup_9_2_0; }
		
		//arg+=Variable
		public Assignment getArgAssignment_9_2_0_0() { return cArgAssignment_9_2_0_0; }
		
		//Variable
		public RuleCall getArgVariableParserRuleCall_9_2_0_0_0() { return cArgVariableParserRuleCall_9_2_0_0_0; }
		
		//","
		public Keyword getCommaKeyword_9_2_0_1() { return cCommaKeyword_9_2_0_1; }
		
		//arg+=Variable
		public Assignment getArgAssignment_9_2_1() { return cArgAssignment_9_2_1; }
		
		//Variable
		public RuleCall getArgVariableParserRuleCall_9_2_1_0() { return cArgVariableParserRuleCall_9_2_1_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_9_3() { return cRightParenthesisKeyword_9_3; }
		
		//(":" arg+=Variable)?
		public Group getGroup_9_4() { return cGroup_9_4; }
		
		//":"
		public Keyword getColonKeyword_9_4_0() { return cColonKeyword_9_4_0; }
		
		//arg+=Variable
		public Assignment getArgAssignment_9_4_1() { return cArgAssignment_9_4_1; }
		
		//Variable
		public RuleCall getArgVariableParserRuleCall_9_4_1_0() { return cArgVariableParserRuleCall_9_4_1_0; }
		
		//"RequiredServices:"?
		public Keyword getRequiredServicesKeyword_10() { return cRequiredServicesKeyword_10; }
		
		//req+=RequiredService*
		public Assignment getReqAssignment_11() { return cReqAssignment_11; }
		
		//RequiredService
		public RuleCall getReqRequiredServiceParserRuleCall_11_0() { return cReqRequiredServiceParserRuleCall_11_0; }
		
		//bind+=Bindings*
		public Assignment getBindAssignment_12() { return cBindAssignment_12; }
		
		//Bindings
		public RuleCall getBindBindingsParserRuleCall_12_0() { return cBindBindingsParserRuleCall_12_0; }
	}
	public class InstanceCompElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aelos.xtext.architecture.Architecture.InstanceComp");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//InstanceComp:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aelos.xtext.architecture.Architecture.Variable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeEnumRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		
		//Variable:
		//	name=ID ":" type=Type;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ":" type=Type
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//Type
		public RuleCall getTypeTypeEnumRuleCall_2_0() { return cTypeTypeEnumRuleCall_2_0; }
	}
	public class BindingsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aelos.xtext.architecture.Architecture.Bindings");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBindKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameComp1Assignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cNameComp1InstanceCompCrossReference_1_0 = (CrossReference)cNameComp1Assignment_1.eContents().get(0);
		private final RuleCall cNameComp1InstanceCompIDTerminalRuleCall_1_0_1 = (RuleCall)cNameComp1InstanceCompCrossReference_1_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameServ1Assignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cNameServ1ServiceNameCrossReference_3_0 = (CrossReference)cNameServ1Assignment_3.eContents().get(0);
		private final RuleCall cNameServ1ServiceNameIDTerminalRuleCall_3_0_1 = (RuleCall)cNameServ1ServiceNameCrossReference_3_0.eContents().get(1);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cNameComp2Assignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cNameComp2InstanceCompCrossReference_5_0 = (CrossReference)cNameComp2Assignment_5.eContents().get(0);
		private final RuleCall cNameComp2InstanceCompIDTerminalRuleCall_5_0_1 = (RuleCall)cNameComp2InstanceCompCrossReference_5_0.eContents().get(1);
		private final Keyword cFullStopKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cNameServ2Assignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cNameServ2ServiceNameCrossReference_7_0 = (CrossReference)cNameServ2Assignment_7.eContents().get(0);
		private final RuleCall cNameServ2ServiceNameIDTerminalRuleCall_7_0_1 = (RuleCall)cNameServ2ServiceNameCrossReference_7_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Bindings:
		//	"bind(" nameComp1+=[InstanceComp] '.' nameServ1+=[ServiceName] "," nameComp2+=[InstanceComp] '.'
		//	nameServ2+=[ServiceName] ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"bind(" nameComp1+=[InstanceComp] '.' nameServ1+=[ServiceName] "," nameComp2+=[InstanceComp] '.'
		//nameServ2+=[ServiceName] ")"
		public Group getGroup() { return cGroup; }
		
		//"bind("
		public Keyword getBindKeyword_0() { return cBindKeyword_0; }
		
		//nameComp1+=[InstanceComp]
		public Assignment getNameComp1Assignment_1() { return cNameComp1Assignment_1; }
		
		//[InstanceComp]
		public CrossReference getNameComp1InstanceCompCrossReference_1_0() { return cNameComp1InstanceCompCrossReference_1_0; }
		
		//ID
		public RuleCall getNameComp1InstanceCompIDTerminalRuleCall_1_0_1() { return cNameComp1InstanceCompIDTerminalRuleCall_1_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_2() { return cFullStopKeyword_2; }
		
		//nameServ1+=[ServiceName]
		public Assignment getNameServ1Assignment_3() { return cNameServ1Assignment_3; }
		
		//[ServiceName]
		public CrossReference getNameServ1ServiceNameCrossReference_3_0() { return cNameServ1ServiceNameCrossReference_3_0; }
		
		//ID
		public RuleCall getNameServ1ServiceNameIDTerminalRuleCall_3_0_1() { return cNameServ1ServiceNameIDTerminalRuleCall_3_0_1; }
		
		//","
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//nameComp2+=[InstanceComp]
		public Assignment getNameComp2Assignment_5() { return cNameComp2Assignment_5; }
		
		//[InstanceComp]
		public CrossReference getNameComp2InstanceCompCrossReference_5_0() { return cNameComp2InstanceCompCrossReference_5_0; }
		
		//ID
		public RuleCall getNameComp2InstanceCompIDTerminalRuleCall_5_0_1() { return cNameComp2InstanceCompIDTerminalRuleCall_5_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_6() { return cFullStopKeyword_6; }
		
		//nameServ2+=[ServiceName]
		public Assignment getNameServ2Assignment_7() { return cNameServ2Assignment_7; }
		
		//[ServiceName]
		public CrossReference getNameServ2ServiceNameCrossReference_7_0() { return cNameServ2ServiceNameCrossReference_7_0; }
		
		//ID
		public RuleCall getNameServ2ServiceNameIDTerminalRuleCall_7_0_1() { return cNameServ2ServiceNameIDTerminalRuleCall_7_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_8() { return cRightParenthesisKeyword_8; }
	}
	public class RequiredServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aelos.xtext.architecture.Architecture.RequiredService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameVarMethodeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameVarMethodeVariableParserRuleCall_0_0 = (RuleCall)cNameVarMethodeAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameCompAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cNameCompInstanceCompCrossReference_2_0 = (CrossReference)cNameCompAssignment_2.eContents().get(0);
		private final RuleCall cNameCompInstanceCompIDTerminalRuleCall_2_0_1 = (RuleCall)cNameCompInstanceCompCrossReference_2_0.eContents().get(1);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameServAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cNameServServiceNameCrossReference_4_0 = (CrossReference)cNameServAssignment_4.eContents().get(0);
		private final RuleCall cNameServServiceNameIDTerminalRuleCall_4_0_1 = (RuleCall)cNameServServiceNameCrossReference_4_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RequiredService:
		//	nameVarMethode+=Variable ":=" nameComp+=[InstanceComp] '.' nameServ+=[ServiceName] ";";
		@Override public ParserRule getRule() { return rule; }
		
		//nameVarMethode+=Variable ":=" nameComp+=[InstanceComp] '.' nameServ+=[ServiceName] ";"
		public Group getGroup() { return cGroup; }
		
		//nameVarMethode+=Variable
		public Assignment getNameVarMethodeAssignment_0() { return cNameVarMethodeAssignment_0; }
		
		//Variable
		public RuleCall getNameVarMethodeVariableParserRuleCall_0_0() { return cNameVarMethodeVariableParserRuleCall_0_0; }
		
		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }
		
		//nameComp+=[InstanceComp]
		public Assignment getNameCompAssignment_2() { return cNameCompAssignment_2; }
		
		//[InstanceComp]
		public CrossReference getNameCompInstanceCompCrossReference_2_0() { return cNameCompInstanceCompCrossReference_2_0; }
		
		//ID
		public RuleCall getNameCompInstanceCompIDTerminalRuleCall_2_0_1() { return cNameCompInstanceCompIDTerminalRuleCall_2_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
		
		//nameServ+=[ServiceName]
		public Assignment getNameServAssignment_4() { return cNameServAssignment_4; }
		
		//[ServiceName]
		public CrossReference getNameServServiceNameCrossReference_4_0() { return cNameServServiceNameCrossReference_4_0; }
		
		//ID
		public RuleCall getNameServServiceNameIDTerminalRuleCall_4_0_1() { return cNameServServiceNameIDTerminalRuleCall_4_0_1; }
		
		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}
	public class ServiceNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.aelos.xtext.architecture.Architecture.ServiceName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ServiceName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	
	public class TypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.aelos.xtext.architecture.Architecture.Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINTINTKeyword_0_0 = (Keyword)cINTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSTRINGEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSTRINGSTRINGKeyword_1_0 = (Keyword)cSTRINGEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cBooleanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cBooleanBooleanKeyword_2_0 = (Keyword)cBooleanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDoubleEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDoubleDoubleKeyword_3_0 = (Keyword)cDoubleEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum Type:
		//	INT | STRING | Boolean | Double;
		public EnumRule getRule() { return rule; }
		
		//INT | STRING | Boolean | Double
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_0() { return cINTEnumLiteralDeclaration_0; }
		
		//"INT"
		public Keyword getINTINTKeyword_0_0() { return cINTINTKeyword_0_0; }
		
		//STRING
		public EnumLiteralDeclaration getSTRINGEnumLiteralDeclaration_1() { return cSTRINGEnumLiteralDeclaration_1; }
		
		//"STRING"
		public Keyword getSTRINGSTRINGKeyword_1_0() { return cSTRINGSTRINGKeyword_1_0; }
		
		//Boolean
		public EnumLiteralDeclaration getBooleanEnumLiteralDeclaration_2() { return cBooleanEnumLiteralDeclaration_2; }
		
		//"Boolean"
		public Keyword getBooleanBooleanKeyword_2_0() { return cBooleanBooleanKeyword_2_0; }
		
		//Double
		public EnumLiteralDeclaration getDoubleEnumLiteralDeclaration_3() { return cDoubleEnumLiteralDeclaration_3; }
		
		//"Double"
		public Keyword getDoubleDoubleKeyword_3_0() { return cDoubleDoubleKeyword_3_0; }
	}
	
	private final ModelElements pModel;
	private final AbstractModelElements pAbstractModel;
	private final ImportElements pImport;
	private final QualifiedNameWithWildcardElements pQualifiedNameWithWildcard;
	private final QualifiedNameElements pQualifiedName;
	private final ComponentElements pComponent;
	private final InstanceCompElements pInstanceComp;
	private final VariableElements pVariable;
	private final BindingsElements pBindings;
	private final RequiredServiceElements pRequiredService;
	private final ServiceNameElements pServiceName;
	private final TypeElements eType;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ArchitectureGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pAbstractModel = new AbstractModelElements();
		this.pImport = new ImportElements();
		this.pQualifiedNameWithWildcard = new QualifiedNameWithWildcardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pComponent = new ComponentElements();
		this.pInstanceComp = new InstanceCompElements();
		this.pVariable = new VariableElements();
		this.pBindings = new BindingsElements();
		this.pRequiredService = new RequiredServiceElements();
		this.pServiceName = new ServiceNameElements();
		this.eType = new TypeElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.aelos.xtext.architecture.Architecture".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	function+=AbstractModel*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//AbstractModel:
	//	Import? comp+=Component+;
	public AbstractModelElements getAbstractModelAccess() {
		return pAbstractModel;
	}
	
	public ParserRule getAbstractModelRule() {
		return getAbstractModelAccess().getRule();
	}
	
	//Import:
	//	'import' importedNamespace=QualifiedNameWithWildcard;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedNameWithWildcard:
	//	QualifiedName '.*'?;
	public QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return pQualifiedNameWithWildcard;
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//Component:
	//	=> "Component:" inst+=InstanceComp ":" => name=ID
	//	"ProvidedServices:"
	//	"conf(" (arg+=Variable ",")* arg1+=Variable ")" (methode+=ServiceName "(" ((arg+=Variable ",")* arg+=Variable)* ")"
	//	(":" arg+=Variable)?)*
	//	"RequiredServices:"?
	//	req+=RequiredService*
	//	bind+=Bindings*;
	public ComponentElements getComponentAccess() {
		return pComponent;
	}
	
	public ParserRule getComponentRule() {
		return getComponentAccess().getRule();
	}
	
	//InstanceComp:
	//	name=ID;
	public InstanceCompElements getInstanceCompAccess() {
		return pInstanceComp;
	}
	
	public ParserRule getInstanceCompRule() {
		return getInstanceCompAccess().getRule();
	}
	
	//Variable:
	//	name=ID ":" type=Type;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Bindings:
	//	"bind(" nameComp1+=[InstanceComp] '.' nameServ1+=[ServiceName] "," nameComp2+=[InstanceComp] '.'
	//	nameServ2+=[ServiceName] ")";
	public BindingsElements getBindingsAccess() {
		return pBindings;
	}
	
	public ParserRule getBindingsRule() {
		return getBindingsAccess().getRule();
	}
	
	//RequiredService:
	//	nameVarMethode+=Variable ":=" nameComp+=[InstanceComp] '.' nameServ+=[ServiceName] ";";
	public RequiredServiceElements getRequiredServiceAccess() {
		return pRequiredService;
	}
	
	public ParserRule getRequiredServiceRule() {
		return getRequiredServiceAccess().getRule();
	}
	
	//ServiceName:
	//	name=ID;
	public ServiceNameElements getServiceNameAccess() {
		return pServiceName;
	}
	
	public ParserRule getServiceNameRule() {
		return getServiceNameAccess().getRule();
	}
	
	//enum Type:
	//	INT | STRING | Boolean | Double;
	public TypeElements getTypeAccess() {
		return eType;
	}
	
	public EnumRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
