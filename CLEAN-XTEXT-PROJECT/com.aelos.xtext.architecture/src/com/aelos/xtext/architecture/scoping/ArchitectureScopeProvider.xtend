/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.architecture.scoping

import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import com.aelos.xtext.architecture.architecture.ArchitecturePackage
import com.aelos.xtext.architecture.architecture.Component
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.IScope
import com.aelos.xtext.architecture.architecture.Call
import com.aelos.xtext.architecture.architecture.Operation

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class ArchitectureScopeProvider extends AbstractArchitectureScopeProvider {
	override getScope(EObject context, EReference reference) {
		
		if (context instanceof Component && reference == ArchitecturePackage.Literals.COMPONENT__OPS) {
	        
	          // Create IEObjectDescriptions and puts them into an IScope instance
	          return scope_Comp_op(EcoreUtil2.getContainerOfType(context, Component))
	    }
	    //return super.getScope(context, reference)
	    
	    
    
    
	    if (context instanceof Call && reference == ArchitecturePackage.Literals.CALL__MEMBER) {
	        
	          // Create IEObjectDescriptions and puts them into an IScope instance
	          return scope_Call_op(EcoreUtil2.getContainerOfType(context, Call))
	    }
	    return super.getScope(context, reference);
	}
	
	def  IScope scope_Comp_op(Component selct) {
	      //System.out.print("dsjkbc")
      return Scopes.scopeFor(selct.operations);
	}

	def  IScope scope_Call_op(Call selct) {
      //System.out.print("dsjkbc")
      return Scopes.scopeFor(selct.receiver.type.compType.ops);
	}
}
