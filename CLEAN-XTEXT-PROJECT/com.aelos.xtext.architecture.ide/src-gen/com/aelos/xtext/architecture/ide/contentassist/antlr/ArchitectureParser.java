/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.architecture.ide.contentassist.antlr;

import com.aelos.xtext.architecture.ide.contentassist.antlr.internal.InternalArchitectureParser;
import com.aelos.xtext.architecture.services.ArchitectureGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class ArchitectureParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(ArchitectureGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, ArchitectureGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getAbstractModelAccess().getGroup(), "rule__AbstractModel__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getQualifiedNameWithWildcardAccess().getGroup(), "rule__QualifiedNameWithWildcard__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getComponentAccess().getGroup(), "rule__Component__Group__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_6(), "rule__Component__Group_6__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_9(), "rule__Component__Group_9__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_9_2(), "rule__Component__Group_9_2__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_9_2_0(), "rule__Component__Group_9_2_0__0");
			builder.put(grammarAccess.getComponentAccess().getGroup_9_4(), "rule__Component__Group_9_4__0");
			builder.put(grammarAccess.getVariableAccess().getGroup(), "rule__Variable__Group__0");
			builder.put(grammarAccess.getBindingsAccess().getGroup(), "rule__Bindings__Group__0");
			builder.put(grammarAccess.getRequiredServiceAccess().getGroup(), "rule__RequiredService__Group__0");
			builder.put(grammarAccess.getModelAccess().getFunctionAssignment(), "rule__Model__FunctionAssignment");
			builder.put(grammarAccess.getAbstractModelAccess().getCompAssignment_1(), "rule__AbstractModel__CompAssignment_1");
			builder.put(grammarAccess.getImportAccess().getImportedNamespaceAssignment_1(), "rule__Import__ImportedNamespaceAssignment_1");
			builder.put(grammarAccess.getComponentAccess().getInstAssignment_1(), "rule__Component__InstAssignment_1");
			builder.put(grammarAccess.getComponentAccess().getNameAssignment_3(), "rule__Component__NameAssignment_3");
			builder.put(grammarAccess.getComponentAccess().getArgAssignment_6_0(), "rule__Component__ArgAssignment_6_0");
			builder.put(grammarAccess.getComponentAccess().getArg1Assignment_7(), "rule__Component__Arg1Assignment_7");
			builder.put(grammarAccess.getComponentAccess().getMethodeAssignment_9_0(), "rule__Component__MethodeAssignment_9_0");
			builder.put(grammarAccess.getComponentAccess().getArgAssignment_9_2_0_0(), "rule__Component__ArgAssignment_9_2_0_0");
			builder.put(grammarAccess.getComponentAccess().getArgAssignment_9_2_1(), "rule__Component__ArgAssignment_9_2_1");
			builder.put(grammarAccess.getComponentAccess().getArgAssignment_9_4_1(), "rule__Component__ArgAssignment_9_4_1");
			builder.put(grammarAccess.getComponentAccess().getReqAssignment_11(), "rule__Component__ReqAssignment_11");
			builder.put(grammarAccess.getComponentAccess().getBindAssignment_12(), "rule__Component__BindAssignment_12");
			builder.put(grammarAccess.getInstanceCompAccess().getNameAssignment(), "rule__InstanceComp__NameAssignment");
			builder.put(grammarAccess.getVariableAccess().getNameAssignment_0(), "rule__Variable__NameAssignment_0");
			builder.put(grammarAccess.getVariableAccess().getTypeAssignment_2(), "rule__Variable__TypeAssignment_2");
			builder.put(grammarAccess.getBindingsAccess().getNameComp1Assignment_1(), "rule__Bindings__NameComp1Assignment_1");
			builder.put(grammarAccess.getBindingsAccess().getNameServ1Assignment_3(), "rule__Bindings__NameServ1Assignment_3");
			builder.put(grammarAccess.getBindingsAccess().getNameComp2Assignment_5(), "rule__Bindings__NameComp2Assignment_5");
			builder.put(grammarAccess.getBindingsAccess().getNameServ2Assignment_7(), "rule__Bindings__NameServ2Assignment_7");
			builder.put(grammarAccess.getRequiredServiceAccess().getNameVarMethodeAssignment_0(), "rule__RequiredService__NameVarMethodeAssignment_0");
			builder.put(grammarAccess.getRequiredServiceAccess().getNameCompAssignment_2(), "rule__RequiredService__NameCompAssignment_2");
			builder.put(grammarAccess.getRequiredServiceAccess().getNameServAssignment_4(), "rule__RequiredService__NameServAssignment_4");
			builder.put(grammarAccess.getServiceNameAccess().getNameAssignment(), "rule__ServiceName__NameAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private ArchitectureGrammarAccess grammarAccess;

	@Override
	protected InternalArchitectureParser createParser() {
		InternalArchitectureParser result = new InternalArchitectureParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ArchitectureGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ArchitectureGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
