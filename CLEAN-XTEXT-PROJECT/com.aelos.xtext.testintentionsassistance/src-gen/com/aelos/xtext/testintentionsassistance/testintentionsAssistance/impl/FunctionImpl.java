/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.testintentionsassistance.testintentionsAssistance.impl;

import com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Function;
import com.aelos.xtext.testintentionsassistance.testintentionsAssistance.OutVariable;
import com.aelos.xtext.testintentionsassistance.testintentionsAssistance.TestintentionsAssistancePackage;
import com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Variable;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Function</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.aelos.xtext.testintentionsassistance.testintentionsAssistance.impl.FunctionImpl#getOut <em>Out</em>}</li>
 *   <li>{@link com.aelos.xtext.testintentionsassistance.testintentionsAssistance.impl.FunctionImpl#getMethode <em>Methode</em>}</li>
 *   <li>{@link com.aelos.xtext.testintentionsassistance.testintentionsAssistance.impl.FunctionImpl#getArg <em>Arg</em>}</li>
 *   <li>{@link com.aelos.xtext.testintentionsassistance.testintentionsAssistance.impl.FunctionImpl#getArg1 <em>Arg1</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FunctionImpl extends AbstractElementImpl implements Function
{
  /**
   * The cached value of the '{@link #getOut() <em>Out</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOut()
   * @generated
   * @ordered
   */
  protected EList<OutVariable> out;

  /**
   * The default value of the '{@link #getMethode() <em>Methode</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethode()
   * @generated
   * @ordered
   */
  protected static final String METHODE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getMethode() <em>Methode</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMethode()
   * @generated
   * @ordered
   */
  protected String methode = METHODE_EDEFAULT;

  /**
   * The cached value of the '{@link #getArg() <em>Arg</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArg()
   * @generated
   * @ordered
   */
  protected EList<Variable> arg;

  /**
   * The cached value of the '{@link #getArg1() <em>Arg1</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArg1()
   * @generated
   * @ordered
   */
  protected Variable arg1;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FunctionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TestintentionsAssistancePackage.Literals.FUNCTION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<OutVariable> getOut()
  {
    if (out == null)
    {
      out = new EObjectContainmentEList<OutVariable>(OutVariable.class, this, TestintentionsAssistancePackage.FUNCTION__OUT);
    }
    return out;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getMethode()
  {
    return methode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMethode(String newMethode)
  {
    String oldMethode = methode;
    methode = newMethode;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestintentionsAssistancePackage.FUNCTION__METHODE, oldMethode, methode));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Variable> getArg()
  {
    if (arg == null)
    {
      arg = new EObjectResolvingEList<Variable>(Variable.class, this, TestintentionsAssistancePackage.FUNCTION__ARG);
    }
    return arg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable getArg1()
  {
    if (arg1 != null && arg1.eIsProxy())
    {
      InternalEObject oldArg1 = (InternalEObject)arg1;
      arg1 = (Variable)eResolveProxy(oldArg1);
      if (arg1 != oldArg1)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, TestintentionsAssistancePackage.FUNCTION__ARG1, oldArg1, arg1));
      }
    }
    return arg1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable basicGetArg1()
  {
    return arg1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setArg1(Variable newArg1)
  {
    Variable oldArg1 = arg1;
    arg1 = newArg1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, TestintentionsAssistancePackage.FUNCTION__ARG1, oldArg1, arg1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TestintentionsAssistancePackage.FUNCTION__OUT:
        return ((InternalEList<?>)getOut()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TestintentionsAssistancePackage.FUNCTION__OUT:
        return getOut();
      case TestintentionsAssistancePackage.FUNCTION__METHODE:
        return getMethode();
      case TestintentionsAssistancePackage.FUNCTION__ARG:
        return getArg();
      case TestintentionsAssistancePackage.FUNCTION__ARG1:
        if (resolve) return getArg1();
        return basicGetArg1();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TestintentionsAssistancePackage.FUNCTION__OUT:
        getOut().clear();
        getOut().addAll((Collection<? extends OutVariable>)newValue);
        return;
      case TestintentionsAssistancePackage.FUNCTION__METHODE:
        setMethode((String)newValue);
        return;
      case TestintentionsAssistancePackage.FUNCTION__ARG:
        getArg().clear();
        getArg().addAll((Collection<? extends Variable>)newValue);
        return;
      case TestintentionsAssistancePackage.FUNCTION__ARG1:
        setArg1((Variable)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TestintentionsAssistancePackage.FUNCTION__OUT:
        getOut().clear();
        return;
      case TestintentionsAssistancePackage.FUNCTION__METHODE:
        setMethode(METHODE_EDEFAULT);
        return;
      case TestintentionsAssistancePackage.FUNCTION__ARG:
        getArg().clear();
        return;
      case TestintentionsAssistancePackage.FUNCTION__ARG1:
        setArg1((Variable)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TestintentionsAssistancePackage.FUNCTION__OUT:
        return out != null && !out.isEmpty();
      case TestintentionsAssistancePackage.FUNCTION__METHODE:
        return METHODE_EDEFAULT == null ? methode != null : !METHODE_EDEFAULT.equals(methode);
      case TestintentionsAssistancePackage.FUNCTION__ARG:
        return arg != null && !arg.isEmpty();
      case TestintentionsAssistancePackage.FUNCTION__ARG1:
        return arg1 != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (methode: ");
    result.append(methode);
    result.append(')');
    return result.toString();
  }

} //FunctionImpl
