/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.testintentionsassistance.testintentionsAssistance.impl;

import com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Expression;
import com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Inst;
import com.aelos.xtext.testintentionsassistance.testintentionsAssistance.TestintentionsAssistancePackage;
import com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Variable;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Inst</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.aelos.xtext.testintentionsassistance.testintentionsAssistance.impl.InstImpl#getVariable <em>Variable</em>}</li>
 *   <li>{@link com.aelos.xtext.testintentionsassistance.testintentionsAssistance.impl.InstImpl#getValeur <em>Valeur</em>}</li>
 * </ul>
 *
 * @generated
 */
public class InstImpl extends MinimalEObjectImpl.Container implements Inst
{
  /**
   * The cached value of the '{@link #getVariable() <em>Variable</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVariable()
   * @generated
   * @ordered
   */
  protected EList<Variable> variable;

  /**
   * The cached value of the '{@link #getValeur() <em>Valeur</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getValeur()
   * @generated
   * @ordered
   */
  protected EList<Expression> valeur;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected InstImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return TestintentionsAssistancePackage.Literals.INST;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Variable> getVariable()
  {
    if (variable == null)
    {
      variable = new EObjectContainmentEList<Variable>(Variable.class, this, TestintentionsAssistancePackage.INST__VARIABLE);
    }
    return variable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Expression> getValeur()
  {
    if (valeur == null)
    {
      valeur = new EObjectContainmentEList<Expression>(Expression.class, this, TestintentionsAssistancePackage.INST__VALEUR);
    }
    return valeur;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case TestintentionsAssistancePackage.INST__VARIABLE:
        return ((InternalEList<?>)getVariable()).basicRemove(otherEnd, msgs);
      case TestintentionsAssistancePackage.INST__VALEUR:
        return ((InternalEList<?>)getValeur()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case TestintentionsAssistancePackage.INST__VARIABLE:
        return getVariable();
      case TestintentionsAssistancePackage.INST__VALEUR:
        return getValeur();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case TestintentionsAssistancePackage.INST__VARIABLE:
        getVariable().clear();
        getVariable().addAll((Collection<? extends Variable>)newValue);
        return;
      case TestintentionsAssistancePackage.INST__VALEUR:
        getValeur().clear();
        getValeur().addAll((Collection<? extends Expression>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case TestintentionsAssistancePackage.INST__VARIABLE:
        getVariable().clear();
        return;
      case TestintentionsAssistancePackage.INST__VALEUR:
        getValeur().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case TestintentionsAssistancePackage.INST__VARIABLE:
        return variable != null && !variable.isEmpty();
      case TestintentionsAssistancePackage.INST__VALEUR:
        return valeur != null && !valeur.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //InstImpl
