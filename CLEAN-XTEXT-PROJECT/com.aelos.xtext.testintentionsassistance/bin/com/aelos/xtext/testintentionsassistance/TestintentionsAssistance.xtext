grammar com.aelos.xtext.testintentionsassistance.TestintentionsAssistance with org.eclipse.xtext.common.Terminals

generate testintentionsAssistance "http://www.aelos.com/xtext/testintentionsassistance/TestintentionsAssistance"

Model:
     (elements+=DomainDeclaration)*;

DomainDeclaration:
    'domain' name=QualifiedName '{'
        (elements+=AbstractElement)*
    '}';

     
QualifiedName:
    ID ('.' ID)*;
    
Import:
    'import' importedNamespace=QualifiedNameWithWildcard;
    
QualifiedNameWithWildcard:
    QualifiedName '.*'?;

AbstractElement:
    TestIntention | Function | Data | Import | DomainDeclaration;

//Pour le test domain 
Function:
	out += OutVariable(","out+=OutVariable)* "=" methode = ID "("(arg+=[Variable] ",")*arg1=[Variable]")";
	
//Pour le test data 	
Data: {Data}
	'input:('(inst+=Inst "," )*|inst+=Inst")"*;
	
OutVariable:
      name=ID ":" type=Type;	
	
Inst:
	variable+=Variable ':=' valeur+=Atomic
;	
	
//Pour le test intention           
TestIntention:
	 'description:' description=STRING
     'datapredicate:' expression+=Expression
     'oracle:' outvar=[OutVariable]"="expression+=Expression;
     
Expression: Or;

Or returns Expression:
	And ({Or.left=current} "∨" right=And)*;
	
And returns Expression:
		Equality ({And.left=current} "∧" right=Equality)*;

Equality returns Expression: Comparison (
		{Equality.left=current} op=("="|"<>")
       	right=Comparison
)*;

Comparison returns Expression: PlusOrMinus (
		{Comparison.left=current} op=("≥"|"≤"|">"|"<")
       	right=PlusOrMinus
)*;

PlusOrMinus returns Expression: MulOrDiv (
		({Plus.left=current} '+' | {Minus.left=current} '-')
       	right=MulOrDiv
 )*;
 
MulOrDiv returns Expression: Primary (
		{MulOrDiv.left=current} op=('*'|'/')
       	right=Primary
 )*;


 
Variable:
      name=ID ":" type=Type;


enum Type : INT | STRING | Boolean | Double;

Boolean:
	'true'|'false';

Double:
	INT'.'INT;

Primary returns Expression:
	'(' Expression ')' |
	{Not} "!" expression=Primary | Atomic;
	
Atomic returns Expression:
	{INT} value=INT | 
	{STRING} value=STRING | 
	{Boolean} value=Boolean | 
	{Double} value=Double | 
	{VariableRef} variable=[Variable];
	