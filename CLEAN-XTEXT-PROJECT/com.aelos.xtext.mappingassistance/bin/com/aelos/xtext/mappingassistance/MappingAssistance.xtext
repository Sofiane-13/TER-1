grammar com.aelos.xtext.mappingassistance.MappingAssistance with org.eclipse.xtext.common.Terminals

generate mappingAssistance "http://www.aelos.com/xtext/mappingassistance/MappingAssistance"

import "http://www.aelos.com/xtext/testintentionsassistance/TestintentionsAssistance" as testIntention
import "http://www.aelos.com/xtext/architecture/Architecture" as arch

Model:
	function+=AbstractModel*;


AbstractModel:(im+=Import)+ ((testDr+=TestDriver ) | 
	(obs+=Observer)| 
	(comp+=Comopnent)| 
	(mock+=Mock)| 
	(conf+=Conf)| 
	(bind+=Bindings)| 
	(inst+=InstanceComp)
)* ;

Import:
    'import' importedNamespace=QualifiedNameWithWildcard;
    
QualifiedNameWithWildcard:
    QualifiedName '.*'?;
        
QualifiedName:
    ID ('.' ID)*;
    
TestDriver :

	{TestDriver} "TestDriver" "{"

	(outVar+=[testIntention::Variable]":="service=[arch::Variable]'.'member+=[arch::Operation]"("((arg+=[testIntention::Variable] ",")*arg+=[testIntention::Variable])*")")*"}"

	;
	
Observer :
	"observer:"name=ID"("service1=[arch::Variable]'.'member1+=[arch::Operation]","service2=[arch::Variable]'.'member2+=[arch::Operation]")""("((arg+=[testIntention::Variable] ",")*arg+=[testIntention::Variable])*")";	
Mock:
"mock:"IntentionVar+=[testIntention::Variable]":="service=[arch::Variable]'.'member+=[arch::Operation]
;
Conf:
"replaceConf:"service=[arch::Variable]'.'member=[arch::Operation]"("((varConf+=[arch::Variable]":="instVar+=Atomic",")*(varConf+=[arch::Variable]":="instVar+=Atomic))*")"
; 

Atomic:
	{INT} value=INT | 
	{STRING} value=STRING | 
	{Boolean} value=Boolean | 
	{Double} value=Double | 
	{VariableRef} variable=[Variable];
	
	
Comopnent:
	"AddComponent:"
	name=ID "{"
		"providedServices" "(" ((ops+=[Operation] ",")*(ops+=[Operation]))* ")"
		->(operations+=Operation)*
		//(vars+=Variable)*
		//"requiredService" "(" ((calls+=Call ",")*(calls+=Call))* ")"
	"}"

;
Operation:
    "def" name=ID "("((arg+=Variable ",")*arg+=Variable)*")" ":" type= Type
;
Variable:
      name=ID ":" type=Type;
      
Bindings :
	"addBind(" nameComp=[InstanceComp]'.'nameServ1+=[Operation] "," nameComp1=[arch::Variable]'.'nameServ2+=[arch::Operation] ")";
      
InstanceComp:
"def"
 name=ID ":"type=[Comopnent];	
Call : receiver=[arch::Variable]'.'member+=[arch::Operation]; 

      
 enum Type : INT | STRING | Boolean | Double;
 Boolean:
	'true'|'false';

Double:
	INT'.'INT;
 
 