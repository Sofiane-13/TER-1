/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.mappingassistance.serializer;

import com.aelos.xtext.mappingassistance.services.MappingAssistanceGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class MappingAssistanceSyntacticSequencer extends AbstractSyntacticSequencer {

	protected MappingAssistanceGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Observer___LeftParenthesisKeyword_7_0_RightParenthesisKeyword_7_2__a;
	protected AbstractElementAlias match_Observer___RightParenthesisKeyword_7_2_LeftParenthesisKeyword_7_0__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (MappingAssistanceGrammarAccess) access;
		match_Observer___LeftParenthesisKeyword_7_0_RightParenthesisKeyword_7_2__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getObserverAccess().getLeftParenthesisKeyword_7_0()), new TokenAlias(false, false, grammarAccess.getObserverAccess().getRightParenthesisKeyword_7_2()));
		match_Observer___RightParenthesisKeyword_7_2_LeftParenthesisKeyword_7_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getObserverAccess().getRightParenthesisKeyword_7_2()), new TokenAlias(false, false, grammarAccess.getObserverAccess().getLeftParenthesisKeyword_7_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Observer___LeftParenthesisKeyword_7_0_RightParenthesisKeyword_7_2__a.equals(syntax))
				emit_Observer___LeftParenthesisKeyword_7_0_RightParenthesisKeyword_7_2__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Observer___RightParenthesisKeyword_7_2_LeftParenthesisKeyword_7_0__a.equals(syntax))
				emit_Observer___RightParenthesisKeyword_7_2_LeftParenthesisKeyword_7_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ('(' ')')*
	 *
	 * This ambiguous syntax occurs at:
	 *     arg+=[Variable|ID] ')' (ambiguity) (rule end)
	 *     serviceName2+=Call ')' (ambiguity) (rule end)
	 */
	protected void emit_Observer___LeftParenthesisKeyword_7_0_RightParenthesisKeyword_7_2__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     (')' '(')*
	 *
	 * This ambiguous syntax occurs at:
	 *     arg+=[Variable|ID] (ambiguity) arg+=[Variable|ID]
	 *     serviceName2+=Call ')' '(' (ambiguity) arg+=[Variable|ID]
	 */
	protected void emit_Observer___RightParenthesisKeyword_7_2_LeftParenthesisKeyword_7_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
