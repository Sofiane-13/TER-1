/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.mappingassistance.mappingAssistance.impl;

import com.aelos.xtext.mappingassistance.mappingAssistance.InstanceComp;
import com.aelos.xtext.mappingassistance.mappingAssistance.MappingAssistancePackage;
import com.aelos.xtext.mappingassistance.mappingAssistance.RequiredService;
import com.aelos.xtext.mappingassistance.mappingAssistance.ServiceName;
import com.aelos.xtext.mappingassistance.mappingAssistance.Variable;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Required Service</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.RequiredServiceImpl#getNameVarMethode <em>Name Var Methode</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.RequiredServiceImpl#getNameComp <em>Name Comp</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.RequiredServiceImpl#getNameServ <em>Name Serv</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RequiredServiceImpl extends MinimalEObjectImpl.Container implements RequiredService
{
  /**
   * The cached value of the '{@link #getNameVarMethode() <em>Name Var Methode</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameVarMethode()
   * @generated
   * @ordered
   */
  protected EList<Variable> nameVarMethode;

  /**
   * The cached value of the '{@link #getNameComp() <em>Name Comp</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameComp()
   * @generated
   * @ordered
   */
  protected EList<InstanceComp> nameComp;

  /**
   * The cached value of the '{@link #getNameServ() <em>Name Serv</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameServ()
   * @generated
   * @ordered
   */
  protected EList<ServiceName> nameServ;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RequiredServiceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingAssistancePackage.Literals.REQUIRED_SERVICE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Variable> getNameVarMethode()
  {
    if (nameVarMethode == null)
    {
      nameVarMethode = new EObjectContainmentEList<Variable>(Variable.class, this, MappingAssistancePackage.REQUIRED_SERVICE__NAME_VAR_METHODE);
    }
    return nameVarMethode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<InstanceComp> getNameComp()
  {
    if (nameComp == null)
    {
      nameComp = new EObjectResolvingEList<InstanceComp>(InstanceComp.class, this, MappingAssistancePackage.REQUIRED_SERVICE__NAME_COMP);
    }
    return nameComp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ServiceName> getNameServ()
  {
    if (nameServ == null)
    {
      nameServ = new EObjectResolvingEList<ServiceName>(ServiceName.class, this, MappingAssistancePackage.REQUIRED_SERVICE__NAME_SERV);
    }
    return nameServ;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_VAR_METHODE:
        return ((InternalEList<?>)getNameVarMethode()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_VAR_METHODE:
        return getNameVarMethode();
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_COMP:
        return getNameComp();
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_SERV:
        return getNameServ();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_VAR_METHODE:
        getNameVarMethode().clear();
        getNameVarMethode().addAll((Collection<? extends Variable>)newValue);
        return;
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_COMP:
        getNameComp().clear();
        getNameComp().addAll((Collection<? extends InstanceComp>)newValue);
        return;
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_SERV:
        getNameServ().clear();
        getNameServ().addAll((Collection<? extends ServiceName>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_VAR_METHODE:
        getNameVarMethode().clear();
        return;
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_COMP:
        getNameComp().clear();
        return;
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_SERV:
        getNameServ().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_VAR_METHODE:
        return nameVarMethode != null && !nameVarMethode.isEmpty();
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_COMP:
        return nameComp != null && !nameComp.isEmpty();
      case MappingAssistancePackage.REQUIRED_SERVICE__NAME_SERV:
        return nameServ != null && !nameServ.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //RequiredServiceImpl
