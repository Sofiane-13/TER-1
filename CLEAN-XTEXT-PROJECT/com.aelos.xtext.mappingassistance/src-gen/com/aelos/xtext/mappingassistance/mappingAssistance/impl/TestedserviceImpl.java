/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.mappingassistance.mappingAssistance.impl;

import com.aelos.xtext.mappingassistance.mappingAssistance.InstanceComp;
import com.aelos.xtext.mappingassistance.mappingAssistance.MappingAssistancePackage;
import com.aelos.xtext.mappingassistance.mappingAssistance.ServiceName;
import com.aelos.xtext.mappingassistance.mappingAssistance.Testedservice;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Testedservice</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.TestedserviceImpl#getNameComp <em>Name Comp</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.TestedserviceImpl#getNameServ1 <em>Name Serv1</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestedserviceImpl extends MinimalEObjectImpl.Container implements Testedservice
{
  /**
   * The cached value of the '{@link #getNameComp() <em>Name Comp</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameComp()
   * @generated
   * @ordered
   */
  protected EList<InstanceComp> nameComp;

  /**
   * The cached value of the '{@link #getNameServ1() <em>Name Serv1</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameServ1()
   * @generated
   * @ordered
   */
  protected EList<ServiceName> nameServ1;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestedserviceImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingAssistancePackage.Literals.TESTEDSERVICE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<InstanceComp> getNameComp()
  {
    if (nameComp == null)
    {
      nameComp = new EObjectResolvingEList<InstanceComp>(InstanceComp.class, this, MappingAssistancePackage.TESTEDSERVICE__NAME_COMP);
    }
    return nameComp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ServiceName> getNameServ1()
  {
    if (nameServ1 == null)
    {
      nameServ1 = new EObjectResolvingEList<ServiceName>(ServiceName.class, this, MappingAssistancePackage.TESTEDSERVICE__NAME_SERV1);
    }
    return nameServ1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TESTEDSERVICE__NAME_COMP:
        return getNameComp();
      case MappingAssistancePackage.TESTEDSERVICE__NAME_SERV1:
        return getNameServ1();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TESTEDSERVICE__NAME_COMP:
        getNameComp().clear();
        getNameComp().addAll((Collection<? extends InstanceComp>)newValue);
        return;
      case MappingAssistancePackage.TESTEDSERVICE__NAME_SERV1:
        getNameServ1().clear();
        getNameServ1().addAll((Collection<? extends ServiceName>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TESTEDSERVICE__NAME_COMP:
        getNameComp().clear();
        return;
      case MappingAssistancePackage.TESTEDSERVICE__NAME_SERV1:
        getNameServ1().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TESTEDSERVICE__NAME_COMP:
        return nameComp != null && !nameComp.isEmpty();
      case MappingAssistancePackage.TESTEDSERVICE__NAME_SERV1:
        return nameServ1 != null && !nameServ1.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TestedserviceImpl
