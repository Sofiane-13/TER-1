/**
 * generated by Xtext 2.13.0
 */
package com.aelos.xtext.mappingassistance.mappingAssistance.impl;

import com.aelos.xtext.mappingassistance.mappingAssistance.Mapping;
import com.aelos.xtext.mappingassistance.mappingAssistance.MappingAssistancePackage;
import com.aelos.xtext.mappingassistance.mappingAssistance.Variable;

import java.util.Collection;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Mapping</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.MappingImpl#getNameVarMode <em>Name Var Mode</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.MappingImpl#getNameVarTest <em>Name Var Test</em>}</li>
 * </ul>
 *
 * @generated
 */
public class MappingImpl extends MinimalEObjectImpl.Container implements Mapping
{
  /**
   * The cached value of the '{@link #getNameVarMode() <em>Name Var Mode</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameVarMode()
   * @generated
   * @ordered
   */
  protected EList<Variable> nameVarMode;

  /**
   * The cached value of the '{@link #getNameVarTest() <em>Name Var Test</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameVarTest()
   * @generated
   * @ordered
   */
  protected EList<com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Variable> nameVarTest;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected MappingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingAssistancePackage.Literals.MAPPING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Variable> getNameVarMode()
  {
    if (nameVarMode == null)
    {
      nameVarMode = new EObjectResolvingEList<Variable>(Variable.class, this, MappingAssistancePackage.MAPPING__NAME_VAR_MODE);
    }
    return nameVarMode;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Variable> getNameVarTest()
  {
    if (nameVarTest == null)
    {
      nameVarTest = new EObjectResolvingEList<com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Variable>(com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Variable.class, this, MappingAssistancePackage.MAPPING__NAME_VAR_TEST);
    }
    return nameVarTest;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.MAPPING__NAME_VAR_MODE:
        return getNameVarMode();
      case MappingAssistancePackage.MAPPING__NAME_VAR_TEST:
        return getNameVarTest();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.MAPPING__NAME_VAR_MODE:
        getNameVarMode().clear();
        getNameVarMode().addAll((Collection<? extends Variable>)newValue);
        return;
      case MappingAssistancePackage.MAPPING__NAME_VAR_TEST:
        getNameVarTest().clear();
        getNameVarTest().addAll((Collection<? extends com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Variable>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.MAPPING__NAME_VAR_MODE:
        getNameVarMode().clear();
        return;
      case MappingAssistancePackage.MAPPING__NAME_VAR_TEST:
        getNameVarTest().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.MAPPING__NAME_VAR_MODE:
        return nameVarMode != null && !nameVarMode.isEmpty();
      case MappingAssistancePackage.MAPPING__NAME_VAR_TEST:
        return nameVarTest != null && !nameVarTest.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //MappingImpl
