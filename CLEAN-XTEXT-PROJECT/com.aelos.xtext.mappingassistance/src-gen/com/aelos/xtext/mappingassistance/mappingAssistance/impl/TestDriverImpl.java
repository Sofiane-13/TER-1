/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.mappingassistance.mappingAssistance.impl;

import com.aelos.xtext.mappingassistance.mappingAssistance.Call;
import com.aelos.xtext.mappingassistance.mappingAssistance.MappingAssistancePackage;
import com.aelos.xtext.mappingassistance.mappingAssistance.TestDriver;

import com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Variable;

import java.util.Collection;

import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Test Driver</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.TestDriverImpl#getOutVar <em>Out Var</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.TestDriverImpl#getTagetedservice <em>Tagetedservice</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.TestDriverImpl#getArg <em>Arg</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestDriverImpl extends MinimalEObjectImpl.Container implements TestDriver
{
  /**
   * The cached value of the '{@link #getOutVar() <em>Out Var</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutVar()
   * @generated
   * @ordered
   */
  protected EList<Variable> outVar;

  /**
   * The cached value of the '{@link #getTagetedservice() <em>Tagetedservice</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTagetedservice()
   * @generated
   * @ordered
   */
  protected EList<Call> tagetedservice;

  /**
   * The cached value of the '{@link #getArg() <em>Arg</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArg()
   * @generated
   * @ordered
   */
  protected EList<Variable> arg;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestDriverImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingAssistancePackage.Literals.TEST_DRIVER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Variable> getOutVar()
  {
    if (outVar == null)
    {
      outVar = new EObjectResolvingEList<Variable>(Variable.class, this, MappingAssistancePackage.TEST_DRIVER__OUT_VAR);
    }
    return outVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Call> getTagetedservice()
  {
    if (tagetedservice == null)
    {
      tagetedservice = new EObjectContainmentEList<Call>(Call.class, this, MappingAssistancePackage.TEST_DRIVER__TAGETEDSERVICE);
    }
    return tagetedservice;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Variable> getArg()
  {
    if (arg == null)
    {
      arg = new EObjectResolvingEList<Variable>(Variable.class, this, MappingAssistancePackage.TEST_DRIVER__ARG);
    }
    return arg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TEST_DRIVER__TAGETEDSERVICE:
        return ((InternalEList<?>)getTagetedservice()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TEST_DRIVER__OUT_VAR:
        return getOutVar();
      case MappingAssistancePackage.TEST_DRIVER__TAGETEDSERVICE:
        return getTagetedservice();
      case MappingAssistancePackage.TEST_DRIVER__ARG:
        return getArg();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TEST_DRIVER__OUT_VAR:
        getOutVar().clear();
        getOutVar().addAll((Collection<? extends Variable>)newValue);
        return;
      case MappingAssistancePackage.TEST_DRIVER__TAGETEDSERVICE:
        getTagetedservice().clear();
        getTagetedservice().addAll((Collection<? extends Call>)newValue);
        return;
      case MappingAssistancePackage.TEST_DRIVER__ARG:
        getArg().clear();
        getArg().addAll((Collection<? extends Variable>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TEST_DRIVER__OUT_VAR:
        getOutVar().clear();
        return;
      case MappingAssistancePackage.TEST_DRIVER__TAGETEDSERVICE:
        getTagetedservice().clear();
        return;
      case MappingAssistancePackage.TEST_DRIVER__ARG:
        getArg().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TEST_DRIVER__OUT_VAR:
        return outVar != null && !outVar.isEmpty();
      case MappingAssistancePackage.TEST_DRIVER__TAGETEDSERVICE:
        return tagetedservice != null && !tagetedservice.isEmpty();
      case MappingAssistancePackage.TEST_DRIVER__ARG:
        return arg != null && !arg.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TestDriverImpl
