/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.mappingassistance.mappingAssistance.impl;

import com.aelos.xtext.architecture.architecture.Operation;

import com.aelos.xtext.mappingassistance.mappingAssistance.MappingAssistancePackage;
import com.aelos.xtext.mappingassistance.mappingAssistance.TestDriver;

import com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Variable;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Test Driver</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.TestDriverImpl#getOutVar <em>Out Var</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.TestDriverImpl#getReceiver <em>Receiver</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.TestDriverImpl#getMember <em>Member</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.TestDriverImpl#getArg <em>Arg</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TestDriverImpl extends MinimalEObjectImpl.Container implements TestDriver
{
  /**
   * The cached value of the '{@link #getOutVar() <em>Out Var</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOutVar()
   * @generated
   * @ordered
   */
  protected EList<Variable> outVar;

  /**
   * The cached value of the '{@link #getReceiver() <em>Receiver</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReceiver()
   * @generated
   * @ordered
   */
  protected com.aelos.xtext.architecture.architecture.Variable receiver;

  /**
   * The cached value of the '{@link #getMember() <em>Member</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMember()
   * @generated
   * @ordered
   */
  protected EList<Operation> member;

  /**
   * The cached value of the '{@link #getArg() <em>Arg</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArg()
   * @generated
   * @ordered
   */
  protected EList<Variable> arg;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TestDriverImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingAssistancePackage.Literals.TEST_DRIVER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Variable> getOutVar()
  {
    if (outVar == null)
    {
      outVar = new EObjectResolvingEList<Variable>(Variable.class, this, MappingAssistancePackage.TEST_DRIVER__OUT_VAR);
    }
    return outVar;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public com.aelos.xtext.architecture.architecture.Variable getReceiver()
  {
    if (receiver != null && receiver.eIsProxy())
    {
      InternalEObject oldReceiver = (InternalEObject)receiver;
      receiver = (com.aelos.xtext.architecture.architecture.Variable)eResolveProxy(oldReceiver);
      if (receiver != oldReceiver)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MappingAssistancePackage.TEST_DRIVER__RECEIVER, oldReceiver, receiver));
      }
    }
    return receiver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public com.aelos.xtext.architecture.architecture.Variable basicGetReceiver()
  {
    return receiver;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setReceiver(com.aelos.xtext.architecture.architecture.Variable newReceiver)
  {
    com.aelos.xtext.architecture.architecture.Variable oldReceiver = receiver;
    receiver = newReceiver;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingAssistancePackage.TEST_DRIVER__RECEIVER, oldReceiver, receiver));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Operation> getMember()
  {
    if (member == null)
    {
      member = new EObjectResolvingEList<Operation>(Operation.class, this, MappingAssistancePackage.TEST_DRIVER__MEMBER);
    }
    return member;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Variable> getArg()
  {
    if (arg == null)
    {
      arg = new EObjectResolvingEList<Variable>(Variable.class, this, MappingAssistancePackage.TEST_DRIVER__ARG);
    }
    return arg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TEST_DRIVER__OUT_VAR:
        return getOutVar();
      case MappingAssistancePackage.TEST_DRIVER__RECEIVER:
        if (resolve) return getReceiver();
        return basicGetReceiver();
      case MappingAssistancePackage.TEST_DRIVER__MEMBER:
        return getMember();
      case MappingAssistancePackage.TEST_DRIVER__ARG:
        return getArg();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TEST_DRIVER__OUT_VAR:
        getOutVar().clear();
        getOutVar().addAll((Collection<? extends Variable>)newValue);
        return;
      case MappingAssistancePackage.TEST_DRIVER__RECEIVER:
        setReceiver((com.aelos.xtext.architecture.architecture.Variable)newValue);
        return;
      case MappingAssistancePackage.TEST_DRIVER__MEMBER:
        getMember().clear();
        getMember().addAll((Collection<? extends Operation>)newValue);
        return;
      case MappingAssistancePackage.TEST_DRIVER__ARG:
        getArg().clear();
        getArg().addAll((Collection<? extends Variable>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TEST_DRIVER__OUT_VAR:
        getOutVar().clear();
        return;
      case MappingAssistancePackage.TEST_DRIVER__RECEIVER:
        setReceiver((com.aelos.xtext.architecture.architecture.Variable)null);
        return;
      case MappingAssistancePackage.TEST_DRIVER__MEMBER:
        getMember().clear();
        return;
      case MappingAssistancePackage.TEST_DRIVER__ARG:
        getArg().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.TEST_DRIVER__OUT_VAR:
        return outVar != null && !outVar.isEmpty();
      case MappingAssistancePackage.TEST_DRIVER__RECEIVER:
        return receiver != null;
      case MappingAssistancePackage.TEST_DRIVER__MEMBER:
        return member != null && !member.isEmpty();
      case MappingAssistancePackage.TEST_DRIVER__ARG:
        return arg != null && !arg.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //TestDriverImpl
