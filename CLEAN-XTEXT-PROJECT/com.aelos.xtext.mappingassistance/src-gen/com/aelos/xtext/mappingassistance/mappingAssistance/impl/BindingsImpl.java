/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.mappingassistance.mappingAssistance.impl;

import com.aelos.xtext.architecture.architecture.Variable;

import com.aelos.xtext.mappingassistance.mappingAssistance.Bindings;
import com.aelos.xtext.mappingassistance.mappingAssistance.InstanceComp;
import com.aelos.xtext.mappingassistance.mappingAssistance.MappingAssistancePackage;
import com.aelos.xtext.mappingassistance.mappingAssistance.Operation;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Bindings</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.BindingsImpl#getNameComp <em>Name Comp</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.BindingsImpl#getNameServ1 <em>Name Serv1</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.BindingsImpl#getNameComp1 <em>Name Comp1</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.BindingsImpl#getNameServ2 <em>Name Serv2</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BindingsImpl extends MinimalEObjectImpl.Container implements Bindings
{
  /**
   * The cached value of the '{@link #getNameComp() <em>Name Comp</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameComp()
   * @generated
   * @ordered
   */
  protected InstanceComp nameComp;

  /**
   * The cached value of the '{@link #getNameServ1() <em>Name Serv1</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameServ1()
   * @generated
   * @ordered
   */
  protected EList<Operation> nameServ1;

  /**
   * The cached value of the '{@link #getNameComp1() <em>Name Comp1</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameComp1()
   * @generated
   * @ordered
   */
  protected Variable nameComp1;

  /**
   * The cached value of the '{@link #getNameServ2() <em>Name Serv2</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNameServ2()
   * @generated
   * @ordered
   */
  protected EList<com.aelos.xtext.architecture.architecture.Operation> nameServ2;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BindingsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingAssistancePackage.Literals.BINDINGS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InstanceComp getNameComp()
  {
    if (nameComp != null && nameComp.eIsProxy())
    {
      InternalEObject oldNameComp = (InternalEObject)nameComp;
      nameComp = (InstanceComp)eResolveProxy(oldNameComp);
      if (nameComp != oldNameComp)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MappingAssistancePackage.BINDINGS__NAME_COMP, oldNameComp, nameComp));
      }
    }
    return nameComp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public InstanceComp basicGetNameComp()
  {
    return nameComp;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNameComp(InstanceComp newNameComp)
  {
    InstanceComp oldNameComp = nameComp;
    nameComp = newNameComp;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingAssistancePackage.BINDINGS__NAME_COMP, oldNameComp, nameComp));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Operation> getNameServ1()
  {
    if (nameServ1 == null)
    {
      nameServ1 = new EObjectResolvingEList<Operation>(Operation.class, this, MappingAssistancePackage.BINDINGS__NAME_SERV1);
    }
    return nameServ1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable getNameComp1()
  {
    if (nameComp1 != null && nameComp1.eIsProxy())
    {
      InternalEObject oldNameComp1 = (InternalEObject)nameComp1;
      nameComp1 = (Variable)eResolveProxy(oldNameComp1);
      if (nameComp1 != oldNameComp1)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, MappingAssistancePackage.BINDINGS__NAME_COMP1, oldNameComp1, nameComp1));
      }
    }
    return nameComp1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Variable basicGetNameComp1()
  {
    return nameComp1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNameComp1(Variable newNameComp1)
  {
    Variable oldNameComp1 = nameComp1;
    nameComp1 = newNameComp1;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingAssistancePackage.BINDINGS__NAME_COMP1, oldNameComp1, nameComp1));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<com.aelos.xtext.architecture.architecture.Operation> getNameServ2()
  {
    if (nameServ2 == null)
    {
      nameServ2 = new EObjectResolvingEList<com.aelos.xtext.architecture.architecture.Operation>(com.aelos.xtext.architecture.architecture.Operation.class, this, MappingAssistancePackage.BINDINGS__NAME_SERV2);
    }
    return nameServ2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.BINDINGS__NAME_COMP:
        if (resolve) return getNameComp();
        return basicGetNameComp();
      case MappingAssistancePackage.BINDINGS__NAME_SERV1:
        return getNameServ1();
      case MappingAssistancePackage.BINDINGS__NAME_COMP1:
        if (resolve) return getNameComp1();
        return basicGetNameComp1();
      case MappingAssistancePackage.BINDINGS__NAME_SERV2:
        return getNameServ2();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.BINDINGS__NAME_COMP:
        setNameComp((InstanceComp)newValue);
        return;
      case MappingAssistancePackage.BINDINGS__NAME_SERV1:
        getNameServ1().clear();
        getNameServ1().addAll((Collection<? extends Operation>)newValue);
        return;
      case MappingAssistancePackage.BINDINGS__NAME_COMP1:
        setNameComp1((Variable)newValue);
        return;
      case MappingAssistancePackage.BINDINGS__NAME_SERV2:
        getNameServ2().clear();
        getNameServ2().addAll((Collection<? extends com.aelos.xtext.architecture.architecture.Operation>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.BINDINGS__NAME_COMP:
        setNameComp((InstanceComp)null);
        return;
      case MappingAssistancePackage.BINDINGS__NAME_SERV1:
        getNameServ1().clear();
        return;
      case MappingAssistancePackage.BINDINGS__NAME_COMP1:
        setNameComp1((Variable)null);
        return;
      case MappingAssistancePackage.BINDINGS__NAME_SERV2:
        getNameServ2().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.BINDINGS__NAME_COMP:
        return nameComp != null;
      case MappingAssistancePackage.BINDINGS__NAME_SERV1:
        return nameServ1 != null && !nameServ1.isEmpty();
      case MappingAssistancePackage.BINDINGS__NAME_COMP1:
        return nameComp1 != null;
      case MappingAssistancePackage.BINDINGS__NAME_SERV2:
        return nameServ2 != null && !nameServ2.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //BindingsImpl
