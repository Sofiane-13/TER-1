/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package com.aelos.xtext.mappingassistance.mappingAssistance.impl;

import com.aelos.xtext.mappingassistance.mappingAssistance.Call;
import com.aelos.xtext.mappingassistance.mappingAssistance.MappingAssistancePackage;
import com.aelos.xtext.mappingassistance.mappingAssistance.Observer;

import com.aelos.xtext.testintentionsassistance.testintentionsAssistance.Variable;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.EObjectResolvingEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Observer</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.ObserverImpl#getName <em>Name</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.ObserverImpl#getServiceName1 <em>Service Name1</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.ObserverImpl#getServiceName2 <em>Service Name2</em>}</li>
 *   <li>{@link com.aelos.xtext.mappingassistance.mappingAssistance.impl.ObserverImpl#getArg <em>Arg</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ObserverImpl extends MinimalEObjectImpl.Container implements Observer
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getServiceName1() <em>Service Name1</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServiceName1()
   * @generated
   * @ordered
   */
  protected EList<Call> serviceName1;

  /**
   * The cached value of the '{@link #getServiceName2() <em>Service Name2</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServiceName2()
   * @generated
   * @ordered
   */
  protected EList<Call> serviceName2;

  /**
   * The cached value of the '{@link #getArg() <em>Arg</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getArg()
   * @generated
   * @ordered
   */
  protected EList<Variable> arg;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ObserverImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return MappingAssistancePackage.Literals.OBSERVER;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, MappingAssistancePackage.OBSERVER__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Call> getServiceName1()
  {
    if (serviceName1 == null)
    {
      serviceName1 = new EObjectContainmentEList<Call>(Call.class, this, MappingAssistancePackage.OBSERVER__SERVICE_NAME1);
    }
    return serviceName1;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Call> getServiceName2()
  {
    if (serviceName2 == null)
    {
      serviceName2 = new EObjectContainmentEList<Call>(Call.class, this, MappingAssistancePackage.OBSERVER__SERVICE_NAME2);
    }
    return serviceName2;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Variable> getArg()
  {
    if (arg == null)
    {
      arg = new EObjectResolvingEList<Variable>(Variable.class, this, MappingAssistancePackage.OBSERVER__ARG);
    }
    return arg;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.OBSERVER__SERVICE_NAME1:
        return ((InternalEList<?>)getServiceName1()).basicRemove(otherEnd, msgs);
      case MappingAssistancePackage.OBSERVER__SERVICE_NAME2:
        return ((InternalEList<?>)getServiceName2()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.OBSERVER__NAME:
        return getName();
      case MappingAssistancePackage.OBSERVER__SERVICE_NAME1:
        return getServiceName1();
      case MappingAssistancePackage.OBSERVER__SERVICE_NAME2:
        return getServiceName2();
      case MappingAssistancePackage.OBSERVER__ARG:
        return getArg();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.OBSERVER__NAME:
        setName((String)newValue);
        return;
      case MappingAssistancePackage.OBSERVER__SERVICE_NAME1:
        getServiceName1().clear();
        getServiceName1().addAll((Collection<? extends Call>)newValue);
        return;
      case MappingAssistancePackage.OBSERVER__SERVICE_NAME2:
        getServiceName2().clear();
        getServiceName2().addAll((Collection<? extends Call>)newValue);
        return;
      case MappingAssistancePackage.OBSERVER__ARG:
        getArg().clear();
        getArg().addAll((Collection<? extends Variable>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.OBSERVER__NAME:
        setName(NAME_EDEFAULT);
        return;
      case MappingAssistancePackage.OBSERVER__SERVICE_NAME1:
        getServiceName1().clear();
        return;
      case MappingAssistancePackage.OBSERVER__SERVICE_NAME2:
        getServiceName2().clear();
        return;
      case MappingAssistancePackage.OBSERVER__ARG:
        getArg().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case MappingAssistancePackage.OBSERVER__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case MappingAssistancePackage.OBSERVER__SERVICE_NAME1:
        return serviceName1 != null && !serviceName1.isEmpty();
      case MappingAssistancePackage.OBSERVER__SERVICE_NAME2:
        return serviceName2 != null && !serviceName2.isEmpty();
      case MappingAssistancePackage.OBSERVER__ARG:
        return arg != null && !arg.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ObserverImpl
