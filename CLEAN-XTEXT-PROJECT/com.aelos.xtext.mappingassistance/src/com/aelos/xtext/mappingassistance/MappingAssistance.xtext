grammar com.aelos.xtext.mappingassistance.MappingAssistance with org.eclipse.xtext.common.Terminals

generate mappingAssistance "http://www.aelos.com/xtext/mappingassistance/MappingAssistance"

import "http://www.aelos.com/xtext/testintentionsassistance/TestintentionsAssistance" as testIntention
import "http://www.aelos.com/xtext/architecture/Architecture" as arch

Model:
	function+=AbstractModel*;


AbstractModel:(im+=Import)+ (testDr+=TestDriver ) (obs+=Observer)* ;

Import:
    'import' importedNamespace=QualifiedNameWithWildcard;
    
QualifiedNameWithWildcard:
    QualifiedName '.*'?;
        
QualifiedName:
    ID ('.' ID)*;
    
TestDriver :

	"TestDriver:"

	(outVar+=[testIntention::Variable]":="service=[arch::Variable]'.'member+=[arch::Operation]"("((arg+=[testIntention::Variable] ",")*arg+=[testIntention::Variable])*")")*

	;
	
Observer :

	"observer:"name=ID"("service1=[arch::Variable]'.'member1+=[arch::Operation]","service2=[arch::Variable]'.'member2+=[arch::Operation]")"("("((arg+=[testIntention::Variable] ",")*arg+=[testIntention::Variable])*")")*;	

//	("Component" | "Mock" | "Observator")":" 
//	inst+=InstanceComp":" name=ID
//	"ProvidedServices:"
//	"conf("(arg+=Variable ",")*arg1+=Variable")"
//	(methode+=ServiceName "("((arg+=Variable ",")*arg+=Variable)*")"(":"arg+=Variable)?)*
//    "RequiredServices:"?
//    (req+=RequiredService)*
//	(map+=Mapping)*
//	(bind+=Bindings)*
//;
//
//InstanceComp:
//	name=ID
//;
//
//Variable:
//      name=ID ":" type=Type;
//      
//Mapping :
//	 'varModel:' nameVarMode+=[Variable] 'ref' 'varTest:' nameVarTest+=[testIntention::Variable]
//;
//
//Bindings :
//	"bind(" nameComp+=[InstanceComp]'.'nameServ1+=[ServiceName] "," nameComp+=[InstanceComp]'.'nameServ2+=[ServiceName] ")";
//	  
//RequiredService:
//		 
//		nameVarMethode+=Variable":="nameComp+=[InstanceComp]'.'nameServ+=[ServiceName]";";
//	  
//
//ServiceName : name=ID;
Call : receiver=[arch::Variable]'.'member+=[arch::Operation]; 

      
// enum Type : INT | STRING | Boolean | Double;