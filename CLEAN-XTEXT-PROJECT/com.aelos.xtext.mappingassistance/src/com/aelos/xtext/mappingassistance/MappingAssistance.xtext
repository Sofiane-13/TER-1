grammar com.aelos.xtext.mappingassistance.MappingAssistance with org.eclipse.xtext.common.Terminals

generate mappingAssistance "http://www.aelos.com/xtext/mappingassistance/MappingAssistance"

import "http://www.aelos.com/xtext/testintentionsassistance/TestintentionsAssistance" as testIntention
//import "http://www.aelos.com/xtext/testintentionsassistance/architecture" as architecture 
//A mettre quand on aura fait le projet ""architecture"


Model:
	function+=AbstractModel*;


AbstractModel: (imp+=Import)+ (obs+=Observeurs)* (mock+=Mocks)* (testedserv+=Testedservice)+ (testedcomp+=Testedcomposant);

Import:
    'import' importedNamespace=QualifiedNameWithWildcard;
    
QualifiedNameWithWildcard:
    QualifiedName '.*'?;
        
QualifiedName:
    ID ('.' ID)*;

Testedcomposant :
	nameComp+=[InstanceComp]
;

//Testedcomposant :
//	nameComp+=[architecture::InstanceComp]
//;

Testedservice :
	nameComp+=[InstanceComp]'.'nameServ1+=[ServiceName]
;

Mapping :
	 'varModel:' nameVarMode+=[Variable] 'ref' 'varTest:' nameVarTest+=[testIntention::Variable]
;

Mocks :
	'addMock(' mockname+=[MockName] "," nameComp+=[InstanceComp]'.'nameServ1+=[ServiceName] ")"
;

Observeurs :
	"addObserveur(" obsname+=[ObserveurName] "," nameComp+=[InstanceComp]'.'nameServ1+=[ServiceName] "," nameComp+=[InstanceComp]'.'nameServ2+=[ServiceName] ")";


ServiceName : 
	name=ID
;

Variable:
      
      name=ID ":" type=Type;
      
ObserveurName : 
	name=ID
;

MockName : 
	name=ID
;

InstanceComp:
	name=ID
;

      
enum Type : INT | STRING | Boolean | Double;