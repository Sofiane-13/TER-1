/*
 * generated by Xtext 2.13.0
 */
package com.aelos.xtext.mappingassistance.scoping


import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.IScope
import com.aelos.xtext.architecture.architecture.Call
import com.aelos.xtext.architecture.architecture.ArchitecturePackage
import com.aelos.xtext.mappingassistance.mappingAssistance.TestDriver
import com.aelos.xtext.mappingassistance.mappingAssistance.MappingAssistancePackage

//import com.aelos.xtext.mappingassistance.mappingAssistance.RequiredService
//import com.aelos.xtext.mappingassistance.mappingAssistance.ServiceName
//import com.aelos.xtext.mappingassistance.mappingAssistance.Bindings
//import com.aelos.xtext.mappingassistance.mappingAssistance.MappingAssistancePackage
//import com.aelos.xtext.mappingassistance.mappingAssistance.InstanceComp

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class MappingAssistanceScopeProvider extends AbstractMappingAssistanceScopeProvider {
//	override getScope(EObject context, EReference reference) {
//    // We want to define the Scope for the Element's superElement cross-reference
//    if (context instanceof RequiredService
//            && reference == MappingAssistancePackage.Literals.REQUIRED_SERVICE__NAME_SERV) {
//        // Collect a list of candidates by going through the model
//        // EcoreUtil2 provides useful functionality to do that
//        // For example searching for all elements within the root Object's tree
//        val rootElement = EcoreUtil2.getRootContainer(context)
//        val candidates = EcoreUtil2.getAllContentsOfType(rootElement,ServiceName )
//        // Create IEObjectDescriptions and puts them into an IScope instance
//        return Scopes.scopeFor(candidates)
//    }
//    if (context instanceof RequiredService
//            && reference == MappingAssistancePackage.Literals.REQUIRED_SERVICE__NAME_COMP) {
//        // Collect a list of candidates by going through the model
//        // EcoreUtil2 provides useful functionality to do that
//        // For example searching for all elements within the root Object's tree
//        val rootElement = EcoreUtil2.getRootContainer(context)
//        val candidates = EcoreUtil2.getAllContentsOfType(rootElement,InstanceComp )
//        // Create IEObjectDescriptions and puts them into an IScope instance
//        return Scopes.scopeFor(candidates)
//    }
//    if (context instanceof Bindings
//            && reference == MappingAssistancePackage.Literals.BINDINGS__NAME_SERV2) {
//        // Collect a list of candidates by going through the model
//        // EcoreUtil2 provides useful functionality to do that
//        // For example searching for all elements within the root Object's tree
//        val rootElement = EcoreUtil2.getRootContainer(context)
//        val candidates = EcoreUtil2.getAllContentsOfType(rootElement,ServiceName )
//        // Create IEObjectDescriptions and puts them into an IScope instance
//        return Scopes.scopeFor(candidates)
//    }
//    if (context instanceof Bindings
//            && reference == MappingAssistancePackage.Literals.BINDINGS__NAME_COMP) {
//        // Collect a list of candidates by going through the model
//        // EcoreUtil2 provides useful functionality to do that
//        // For example searching for all elements within the root Object's tree
//        val rootElement = EcoreUtil2.getRootContainer(context)
//        val candidates = EcoreUtil2.getAllContentsOfType(rootElement,InstanceComp )
//        // Create IEObjectDescriptions and puts them into an IScope instance
//        return Scopes.scopeFor(candidates)
//    }
//    return super.getScope(context, reference);
//}

	override getScope(EObject context, EReference reference) {
		
		
    
	    if (context instanceof TestDriver && reference == MappingAssistancePackage.Literals.TEST_DRIVER__MEMBER) {
	        	System.out.print("dsjkbjjc")
	          // Create IEObjectDescriptions and puts them into an IScope instance
	          return scope_Call_op(EcoreUtil2.getContainerOfType(context, TestDriver))
	    }
	    return super.getScope(context, reference);
	}


	def  IScope scope_Call_op(TestDriver selct) {
      System.out.print("dsjkbc")
      return Scopes.scopeFor(selct.receiver.type.compType.ops);
	}
}
