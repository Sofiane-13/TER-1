/**
 * generated by Xtext 2.13.0
 */
package com.aelos.xtext.mappingassistance.scoping;

import com.aelos.xtext.mappingassistance.mappingAssistance.MappingAssistancePackage;
import com.aelos.xtext.mappingassistance.mappingAssistance.Observer;
import com.aelos.xtext.mappingassistance.mappingAssistance.TestDriver;
import com.aelos.xtext.mappingassistance.scoping.AbstractMappingAssistanceScopeProvider;
import com.google.common.base.Objects;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MappingAssistanceScopeProvider extends AbstractMappingAssistanceScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if (((context instanceof TestDriver) && Objects.equal(reference, MappingAssistancePackage.Literals.TEST_DRIVER__MEMBER))) {
      return this.scope_Call_op(EcoreUtil2.<TestDriver>getContainerOfType(context, TestDriver.class));
    }
    if (((context instanceof Observer) && Objects.equal(reference, MappingAssistancePackage.Literals.OBSERVER__MEMBER1))) {
      return this.scope_Call_op1(EcoreUtil2.<Observer>getContainerOfType(context, Observer.class));
    }
    if (((context instanceof Observer) && Objects.equal(reference, MappingAssistancePackage.Literals.OBSERVER__MEMBER2))) {
      return this.scope_Call_op2(EcoreUtil2.<Observer>getContainerOfType(context, Observer.class));
    }
    return super.getScope(context, reference);
  }
  
  public IScope scope_Call_op2(final Observer selct) {
    return Scopes.scopeFor(selct.getService2().getType().getCompType().getOps());
  }
  
  public IScope scope_Call_op1(final Observer selct) {
    return Scopes.scopeFor(selct.getService1().getType().getCompType().getOps());
  }
  
  public IScope scope_Call_op(final TestDriver selct) {
    return Scopes.scopeFor(selct.getService().getType().getCompType().getOps());
  }
}
