/**
 * generated by Xtext 2.13.0
 */
package com.aelos.xtext.mappingassistance.scoping;

import com.aelos.xtext.mappingassistance.mappingAssistance.Bindings;
import com.aelos.xtext.mappingassistance.mappingAssistance.Conf;
import com.aelos.xtext.mappingassistance.mappingAssistance.MappingAssistancePackage;
import com.aelos.xtext.mappingassistance.mappingAssistance.Mock;
import com.aelos.xtext.mappingassistance.mappingAssistance.Observer;
import com.aelos.xtext.mappingassistance.mappingAssistance.TestOP;
import com.aelos.xtext.mappingassistance.scoping.AbstractMappingAssistanceScopeProvider;
import com.google.common.base.Objects;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
@SuppressWarnings("all")
public class MappingAssistanceScopeProvider extends AbstractMappingAssistanceScopeProvider {
  @Override
  public IScope getScope(final EObject context, final EReference reference) {
    if (((context instanceof TestOP) && Objects.equal(reference, MappingAssistancePackage.Literals.TEST_OP__NAME))) {
      return this.scope_Call_op(EcoreUtil2.<TestOP>getContainerOfType(context, TestOP.class));
    }
    if (((context instanceof TestOP) && Objects.equal(reference, MappingAssistancePackage.Literals.TEST_OP__VAR_CONF))) {
      return this.scope_TestDriver_InstVar(EcoreUtil2.<TestOP>getContainerOfType(context, TestOP.class));
    }
    if (((context instanceof Observer) && Objects.equal(reference, MappingAssistancePackage.Literals.OBSERVER__MEMBER1))) {
      return this.scope_Call_op1(EcoreUtil2.<Observer>getContainerOfType(context, Observer.class));
    }
    if (((context instanceof Observer) && Objects.equal(reference, MappingAssistancePackage.Literals.OBSERVER__VAR_OP))) {
      return this.scope_Observer_VarOp(EcoreUtil2.<Observer>getContainerOfType(context, Observer.class));
    }
    if (((context instanceof Observer) && Objects.equal(reference, MappingAssistancePackage.Literals.OBSERVER__MEMBER2))) {
      return this.scope_Call_op2(EcoreUtil2.<Observer>getContainerOfType(context, Observer.class));
    }
    if (((context instanceof Conf) && Objects.equal(reference, MappingAssistancePackage.Literals.CONF__MEMBER))) {
      return this.scope_Call_op_conf(EcoreUtil2.<Conf>getContainerOfType(context, Conf.class));
    }
    if (((context instanceof Bindings) && Objects.equal(reference, MappingAssistancePackage.Literals.BINDINGS__NAME_SERV1))) {
      return this.scope_Call_op_bind(EcoreUtil2.<Bindings>getContainerOfType(context, Bindings.class));
    }
    if (((context instanceof Bindings) && Objects.equal(reference, MappingAssistancePackage.Literals.BINDINGS__NAME_SERV2))) {
      return this.scope_Call_op_bind2(EcoreUtil2.<Bindings>getContainerOfType(context, Bindings.class));
    }
    if (((context instanceof Conf) && Objects.equal(reference, MappingAssistancePackage.Literals.CONF__VAR_CONF))) {
      return this.scope_Call_op_conf2(EcoreUtil2.<Conf>getContainerOfType(context, Conf.class));
    }
    if (((context instanceof Mock) && Objects.equal(reference, MappingAssistancePackage.Literals.MOCK__MEMBER))) {
      return this.scope_Call_op_mock(EcoreUtil2.<Mock>getContainerOfType(context, Mock.class));
    }
    return super.getScope(context, reference);
  }
  
  public IScope scope_Call_op2(final Observer selct) {
    return Scopes.scopeFor(selct.getService2().getType().getCompType().getOps());
  }
  
  public IScope scope_Call_op1(final Observer selct) {
    return Scopes.scopeFor(selct.getService1().getType().getCompType().getOps());
  }
  
  public IScope scope_Call_op(final TestOP selct) {
    return Scopes.scopeFor(selct.getService().getType().getCompType().getOps());
  }
  
  public IScope scope_Call_op_conf(final Conf selct) {
    return Scopes.scopeFor(selct.getService().getType().getCompType().getOps());
  }
  
  public IScope scope_Call_op_conf2(final Conf selct) {
    return Scopes.scopeFor(selct.getMember().getArg());
  }
  
  public IScope scope_Call_op_bind(final Bindings selct) {
    return Scopes.scopeFor(selct.getNameComp().getType().getOps());
  }
  
  public IScope scope_Call_op_bind2(final Bindings selct) {
    return Scopes.scopeFor(selct.getNameComp1().getType().getCompType().getOps());
  }
  
  public IScope scope_Call_op_mock(final Mock selct) {
    return Scopes.scopeFor(selct.getService().getType().getCompType().getOpsReq());
  }
  
  public IScope scope_TestDriver_InstVar(final TestOP selct) {
    int _size = selct.getName().getArg().size();
    String _plus = (Integer.valueOf(_size) + " : ");
    int _size_1 = selct.getVarConf().size();
    String _plus_1 = (_plus + Integer.valueOf(_size_1));
    System.out.println(_plus_1);
    return Scopes.scopeFor(selct.getName().getArg());
  }
  
  public IScope scope_Observer_VarOp(final Observer selct) {
    return Scopes.scopeFor(selct.getMember1().getArg());
  }
}
