Model:
     (elements+=DomainDeclaration)*;

DomainDeclaration:
    'domain' name=QualifiedName '{'
        (elements+=AbstractElement)*
    '}';

     
QualifiedName:
    ID ('.' ID)*;
    
Import:
    'import' importedNamespace=QualifiedNameWithWildcard;
    
QualifiedNameWithWildcard:
    QualifiedName '.*'?;

AbstractElement:
    TestIntention | Function | Data | Import | DomainDeclaration;
          
TestIntention:
	 'description:' description=STRING
     'datapredicate:' expression+=Expression
     'oracle:' expression+=Expression;
     
Expression: Or;

Or returns Expression:
	And ({Or.left=current} "∨" right=And)*;
	
And returns Expression:
		Equality ({And.left=current} "∧" right=Equality)*;

Equality returns Expression: Comparison (
		{Equality.left=current} op=("="|"<>")
       	right=Comparison
)*;

Comparison returns Expression: PlusOrMinus (
		{Comparison.left=current} op=("≥"|"≤"|">"|"<")
       	right=PlusOrMinus
)*;

PlusOrMinus returns Expression: MulOrDiv (
		({Plus.left=current} '+' | {Minus.left=current} '-')
       	right=MulOrDiv
 )*;
 
MulOrDiv returns Expression: Primary (
		{MulOrDiv.left=current} op=('*'|'/')
       	right=Primary
 )*;
 
Function:
	out = Variable "=" methode = ID "("(arg+=Variable ",")*arg1=Variable")";
 
Variable:
      name=ID ":" type=Type;


enum Type : INT | STRING | Boolean | Double;

Boolean:
	'true'|'false';

Double:
	INT'.'INT;

Primary returns Expression:
	'(' Expression ')' |
	{Not} "!" expression=Primary | Atomic;
	
Atomic returns Expression:
	{IntConstant} value=INT | 
	{StringConstant} value=STRING | 
	{BoolConstant} value=('true'|'false') | 
	{VariableRef} variable=[Variable];
	
Data:
	'input : ('(variable=[Variable] ':=' val=Atomic "," )*|variable=[Variable] ':=' val=Atomic")"*;